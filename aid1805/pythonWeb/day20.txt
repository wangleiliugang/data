1.Django中的连接查询
  1.多对多查询
    1.什么是多对多?
      A表中的一条记录可以与B表中的任意多条记录匹配，同时B表中的每一条记录也可以与A表中的
      任意多条记录相匹配。
    2.语法
      entry = models.ManyToManyField(Entry)
      ex:
        class Author(models.Model):
        ......
        publisher = models.ManyToManyField(Publisher)
        注意：Publisher类 需要在Author类 之前声明才可以。
    3.查询
      class Author(models.Model):
        ......
        publisher = models.ManyToManyField(Publisher)
      正向查询：在Author中查询Publisher
        author = Author.objects.get(id=3)
	      pub_list = author.publisher.all()
        通过关联属性.all()实现查找；也可以通过.filter()实现条件查找。
      反向查询：在Publisher中查询Author
        pub = Publisher.objects.get(id=1)
	      authorList = pub.author_set.all()
2.自定义查询对象(models.py中) - objects
  1.声明类EntryManager，继承自models.Manager，并添加自定义函数。
    class EntryManager(models.Manager):
      def 函数名(self,自定义参数):
        .......
	      return ...
  2.使用EntryManager覆盖Models中的objects
    class Entry(models.Model):
      objects = EntryManager()
3.HttpRequest介绍
  1.什么是HttpRequest
    HttpRequest，请求对象，封装了请求过程中的所有信息。
    在Django中，HttpRequest被化身成了request封装到视图处理函数中作为参数；该参数在调用视图
    处理函数时自动传入。
  2.HttpRequest 中的主要内容
    1.request.scheme:请求协议
    2.request.body:请求主体
    3.request.path:请求路径
    4.request.get_host():请求的主机地址/域名
    5.request.method:请求方法
    6.request.GET:get的请求数据
    7.request.POST:post的请求数据
    8.request.COOKIES:cookies的数据
    9.request.META:请求的元数据
  3.有关HTTP协议
    1.每个请求一定会有method方法
      get,post,put,delete,...
      get:向服务器要数据时使用,传递数据到服务器时会直接将请求数据封装到地址之后。
      post:想传递数据到服务器处理的时候用post,post请求提交的数据全部封装在"请求主体"中。
    2.请求主体
      只有post请求和put请求方式才能产生请求主体，其它的请求方式都没有请求主体。
  4.获取请求提交的数据
    1.GET请求
      request.GET['名称']
    2.POST请求
      request.POST['名称']
4.csrf 跨站点攻击
  目的：为了解决跨站点发送post请求。
  解决方案：
    1.删除settings.py中的CsrfViewMiddleware 中间件，不推荐。
    2.在视图函数中增加装饰器 @csrf protect，不推荐。
    3.在模板中，<form>下第一行增加一个标签 {% csrf_token %}
      ex:
      <form action="{% url 'login' %}" method="post">
          {% csrf_token %}
	        ......
      </form>
