1.模板
  1.变量
  2.标签
  3.过滤器
  4.静态文件
  5.模板的继承
    1.什么是模板的继承？
      当多个模板（网页）具备大部分相同的内容时，就可以使用继承的方式将相同的内容继承过来，
      再增加/修改属性自己的内容即可。
    2.模板继承的语法
      1.在父模板中，增加{% block 名称 %}...{% endblock %}标签
      2.在子模板中
        1.在最顶层第一句话增加：{% extends '父模板的名称' %}
        2.增加block标记，编写属于自己的内容
	        {% block 名称%}
	            属于子模板中自己的内容
	        {% endblock %}

2.模型 - models
  1.什么是模型？
    模型，就是根据数据库中数据表的结构而创建出来的class。数据库中的每一张表对应到编程语言中
    就是一个class。数据表中的一个字段（列）可以被构建成class中的一个成员变量（属性），并且在
    模型中完成对数据的CRUD操作。
    C:create
    R:retrieve
    U:update
    D:delete
  2.创建和使用模型 - ORM
    1.什么是ORM
      ORM:Object Relational Mapping
      简称：ORM,O/RM,O/R Mapping
      中文为：对象关系映射
      三大特征：
        1.数据表到类（class）的映射
	        允许将表自动生成一个类，也可以将一个类自动生成一个表。
	      2.数据类型的映射
	        允许将表中字段的类型自动生成到编程语言中对应的数据类型，也允许将编程语言中的数据类型
	        生成数据库中对应的字段类型。
        3.关系映射
	        数据库中表的关联关系：
	          一对一，一对多，多对多
	        将表中的关联关系也映射到编程语言的class中，通过创建对象的关系来完成映射。
    2.ORM的优点
      1.提高了开发效率，能够自动完成实体类到数据表的映射，可以省略庞大的数据访问层。
      2.不用SQL编码就能完成对数据的CRUD操作。
  **3.创建和配置数据库(首先连接数据库:mysql -uroot -p / 密码:123456)**
      1.创建数据库（支持中文）
        create database webdb default charset utf8 collate utf8_general_ci
          **可视化的第三方工具：Navicat for MySQL**
      2.Django中数据库的配置
        settings.py中配置数据库的信息
        DATABASES = {
            'default': {
                'ENGINE': '...',
                'NAME': '...',
		            'USER':'...',
		            'PASSWORD':'...',
		            'HOST':'...',
		            'PORT':'...',
            }
        }
	      1.ENGINE:引擎
	        django.db.backends.mysql
	      2.NAME:要连接到数据库的名称
	      3.USER:用户名称，通常为root
	      4.PASSWORD:密码，123456
	      5.HOST:连接的主机，本机localhost/127.0.0.1/不写
	      6.PORT:端口,3306
	   **连接服务之前(./manage.py runserver)：**
	     1.在虚拟环境中安装pymysql：pip install pymysql==0.7.11
	     2.在项目主目录中的_init_.py文件中编写：import pymysql
                                         pymysql.install_as_MySQLdb()
    4.数据库的同步操作
      1. ./manage.py makemigrations
        作用：将每个应用下的models.py文件映射成一个数据库日志文件，并存放在migrations文件夹中。
      2. ./manage.py migrate
        作用：将每个应用下的migrations文件夹中的日志文件同步到数据库中。
    5.编写models
      1.注意：
        1.models中的每个class都称之为：模型类(Model)或者实体类(Entry)。
	      实体：
	        数据表中的一行记录，就是一个实体。
	        实体完整性：确保每张表中是数据不能有重复的，数据表中的主键是实现实体完整性的方式之一
	      2.models中的每个实体类，必须继承自models.Model。
      2.ex：
        models.py文件中
	      from django.db import models
	      class Publisher(models.Model):
	          name = models.CharField(max_length=30)
	          address = models.CharField(max_length=50)
	          city = models.CharField(max_length=20)
	          country = models.CharField(max_length=20)
	          website = models.URLField()
    6.Django提供的数据字段和字段选项
      1.数据字段(Field Types) - 常用
        1.BooleanField()
	      2.CharField()
	      3.DateField()
	      4.DateTimeField()
	      5.DecimalField()
	      6.EmailField()
	      7.FileField()
	      8.FloatField()
	      9.ImageField()
	      10.URLField()
	      11.IntegerField()
	      12.TextField()
      2.字段选项(Field Optiond) - 常用
        1.null:是否允许为空
	        name=models.CharField(max_length=30,null=True)
	      2.default:为该列设置默认值
	        name=models.CharField(max_length=30,default='匿名')
    7.数据的导入和导出(数据迁移) 以及版本切换
      1.版本切换
        ./manage.py migrate 应用名称 版本号
	        ex:
	        ./manage.py migrate index 0001
      2.数据库的导出
        1.mysqldump -u root -p 数据库名 > XX.sql
	      (导出所有的表结构和数据)
	      2.mysqldump -u root -p -d 数据库名 > XX.sql
	      (导出所有表结构，不导出数据)
      3.数据库的导入
        mysql -u root -p 数据库名 < XX.sql
	      (前提：要求数据库必须存在)
      4.通过数据库自动导出Models(编程语言的类class)
        ./manage.py inspectdb > XX.py
