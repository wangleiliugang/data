路由分发案例
  练习：
    1.创建一个django项目 day3
    2.创建以下几个应用，并注册
      index,music,news,sport
    3.完成以下操作
      1.输入地址为:localhost:8000
        交给index应用中的index_views视图处理
      2.输入地址为:localhost:8000/login
        交给index应用中的login_views视图处理
      3.输入地址为:localhost:8000/music
        交给music应用中的index_views视图处理
      4.输入地址为:localhost:8000/news
        交给news应用中的index_views视图处理
      5.输入地址为:localhost:8000/sport
        交给sport应用中的index_views视图处理
  django官方网址：www.djangoproject.com
  django book网站

1.Django 模板(Template)
  1.什么是模板
    就是一个网页，可以被view视图响应给用户;目的是为了解决复杂的显示问题
  2.模板的设置(主文件夹settings.py中)
    1.BACKEND:指定模板的搜索引擎，不用改动
    2.DIRS:指定模板所存放的目录
      ex:DIRS=['index.templates','music.templates']
      注意:如果DIRS中为空，那么djiago会自动搜索每个应用中的templates文件夹作为模板管理目录
      推荐：
        1.DIRS保持为空。
	      2.在每个应用中，创建一个templates的文件夹。
        3.APP_DIRS
          True:首先从DIRS中指定的文件夹中查找模板，如果没有找到指定模板的话，则再搜索
          templates目录.
  3.模板的加载方式
    1.使用loader获取模板，通过HttpResponse进行响应
      from django.template import loader
      def XXX(request):
        t = loader.get_template('show.html')
	      html = t.render({})
	      return HttpResponse(html)
    2.使用render直接加载
      return render(request,'模板名称',{})
  4.url函数的name参数
    urlpatterns = [
      url(regex,views,kwargs=None,name=None),
    ]
    name:定义当前url的别名，允许在template中使用该别名来找到对应的url
    在django模板中使用name实现链接。
    {% url 'name值'%}
  5.模板的语法
    1.变量
      作用：允许将后端的数据传递给模板(html)，在模板中会根据变量的实际值进行显示
      在django中允许传递给模板作为变量的数据类型：
        数字，字符串，列表，元组，字典，函数，对象
      如何传递变量到模板中
        1.render
	        dic = {
	          '变量1':'值1',
	          '变量2':'值2',
	        }
	        return render(request,'xxx.html',dic)
	      2.loader
	        dic = {
	          '变量1':'值1',
	          '变量2':'值2',
	        }
	        t = loader.get_template('xxx.html')
	        html = t.render(dic)
	        return HttpResponse(html)
      在模板中获取变量的值：
        {{变量名}}
    2.标签
      1.什么是标签
        允许嵌套一些服务器端的逻辑运算到模板中。
      2.语法
        {%...%}
      3.常用标签
        1.{% if 条件 %}...{% endif %}
	        接收:not,and,or
	        **注意:and和or不能同时出现在一个表达式中。**
	        以下内容会当成false处理：
	          [],(),{},0,'',None
	      2.{% if 条件 %}...{% else %}...{% endif %}
	      3.{% ifequal 值1 值2 %}...{% else %}...{% endifequal %}
	      4.{% for 变量 in 列表/元组/字典 %}...{% endfor %}
	        允许使用的内置变量（免声明）：forloop
            变量名                 描述
            forloop.counter       循环计数器，表示当前循环的索引（从``1``开始）
            forloop.counter0      循环计数器，表示当前循环的索引（从``0``开始）
            forloop.revcounter    反向循环计数器（以最后一次循环为``1``，反向计数）
            forloop.revcounter0   反向循环计数器（以最后一次循环为``0``，反向计数）
            forloop.first         当前循环为首个循环时，该变量为True
            forloop.last          当前循环为最后一个循环时，该变量为True
            forloop.parentloop    在嵌套循环中，指向当前循环的上级循环
        5.{% url %}
        6.{% static %}
    3.过滤器
      1.作用
        在显示变量之前，允许对数据进行筛选或改变
      2.过滤器的语法
        {{var|过滤器}}
      3.常用过滤器
        1.{{var|upper}}  将var的数据变为大写
	      2.{{var|lower}}  将var的数据变为小写
	      3.{{var|add:num}}  将var的数据值加num
	      4.{{var|floatformat:n}}  将var四舍五入到n位小数
        5.{{var|truncatechars:n}}  最多显示n位字符且最后3位显示为...
    4.静态文件的处理
      1.什么是静态文件?
        模板中所用到的css,js,image,音视频等一些外部资源文件都是静态文件。 
      2.Django中静态文件的处理
        需要在setting.py中设置静态文件的访问路径和存储路径。
	      1.STATIC_URL
	        指定静态资源的访问路径，一般不改动
	        STATIC_URL='/static/'
	      2.STATICFILES_DIRS
	        指定在开发阶段所有静态文件所在的根目录
	        STATILFILES_DIRS=(BASE_DIR, 'static')
          ex:
            STATILFILES_DIRS=((BASE_DIR, 'static'), (BASE_DIR, 'info'))
      3.访问静态资源
        1.<img src="/static/images/cx17.jpg">
	      2.使用{% static %}访问静态资源
	        1.模板的最顶层增加:{% load static %}
	        2.使用静态文件时:<img src="{% static 'images/cx17.jpg' %}">
