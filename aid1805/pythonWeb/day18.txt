1.模型的数据库操作方法（CRUD）
  1.通过视图向数据库中增加数据(3种方法)
    1.Entry.objects.create(属性1=值1,属性2=值2,...)
      注意:需要导入models模块(from .models import *)
    2.创建一个实体对象，并通过save()方法完成增加数据
      obj = Entry(属性1=值1,属性2=值2,...)
      obj.save()
    3.通过字典创建实体对象，再调用save()方法
      dic = {
        'name':'xx',
	    'age':33,
	    'email':'...',
      }
      obj = Author(**dic)
      obj.save()
  2.查询操作（重难点）
  **所有的查询都要在Entry.objects的基础上完成。**
    1.基本查询操作
      语法:all()
      用法:Entry.objects.all()
      返回值:QuerySet,查询结果集
    2.查询接口
      1.all()
        Entry.objects.all() 相当于:select * from ...;
      2.all().values('列名')
        Entry.objects.all().values('name') 相当于:select name from ...;
	    作用:查询所有记录的某一列的值。
      3.all().values('列名1','列名2',...)
        Entry.objects.all().values('name','age') 相当于:select name,age from ...;
      4.get()
        只能查找一条记录，也只能返回一条记录;如果查询返回多条记录的话，则会报错。
	    Entry.objects.get(id=4) 相当于:select * from ... where id=4;
      5.exclude()
        作用:对给定条件取反。
	    Entry.objects.exclude(id=3) 相当于:select * from ... where not id=3;
        Entry.objects.exclude(id=3,age=35) 相当于:select * from ... where not (id=3 and age=35);
      6.order_by()
	    Entry.objects.order_by('字段名1','-字段名2',...)
	    指定按照字段们进行排序，如果是多个字段中间用逗号,隔开；
	    默认是按照升序排序，降序的话只需要在列名前加'-'即可。
      7.filter()
        根据自定义条件查询结果集，可以是一个，也可以是多个，多个的话条件用逗号,隔开。多个条件内部是使用and来进行条件连接的。
	    1.使用Entry的属性来作为filter()的条件
	      ex:
	      Author.objects.filter(id=1) 相当于:select * from author where id=1;
	      Author.objects.filter(id=1,name='小王') 相当于:select * from author where id=1 and name='小王';
	    2.使用Filed Lookups(查询谓词)
	      1.__exact
	      作用:等值判断
	      Author.objects.filter(id__exact=1) 相当于:select * from author where id=1;
	      2.__contains
	      作用:模糊查询
	      Author.objects.filter(name__contains='陈') 相当于:select * from author where name like '%陈%';
	      3.__in
	      作用:在给定的列表中查询结果
	      Author.objects.filter(id__in=[1,3,4]) 相当于:select * from author where id in (1,3,4);
          4.__gt(大于)
	      5.__gte(大于等于)
	      6.__lt(小于)
	      7.__lte(小于等于)
          ...
	  8.子查询
	    inner = Author.objects.filter(name__exact='小贾').values('age')
	    authors = Author.objects.filter(age__gt=inner)
	    相当于:select * from author where age > (select age from author where name='小贾')
  3.修改操作
    1.修改单个对象
      1.通过get()得到要修改的实体对象
	  2.通过实体对象修改属性值
	  3.再通过实体对象的save()函数，实现保存
	  ex:
	    obj = Author.objects.get(id=1)
	    obj.name = '小强'
	    obj.age = 45
	    obj.save()
      注意:可以使用以下两种方式完成视图的跳转。
	  ex:
	    from django.http import HttpResponseRedirect
	    def update_author_views(request):
		auth = Author.objects.get(id=1)
		auth.name = '小强'
		auth.email = 'xiaoqiang@qq.com'
		auth.save()
		<!-- 1.跳转到author_list_views的视图上,以便实现模板的展现。（请求的转发） -->
		return author_list_views(request)
		<!-- 2.使用重定向的方式完成视图的跳转。 -->
		reurn HttpResponseRedirect('/author_list/')
    2.批量修改(修改查询结果集的值)
      调用update()函数
	  ex:
	    Author.objects.all().update(属性1=值1,...)
	    Author.objects.filter().update(属性1=值1,...)
  4.删除操作
    1.删除单个对象
      obj = Author.objects.get(id=1)
	  obj.delete()
    2.批量删除
      Author.objects.all().delete()
      Author.objects.filter(age__lt=50).delete()
  5.F()操作和Q()操作
    1.F()操作
      作用:用于在执行中获取某列(字段)的值.
	  语法:F('列名')
	  ex:
        from django.db.models import F
	    Author.objects.all().update(age=F('age')+10)
    2.Q()操作
      作用:条件关系的"或"操作.
      ex:
	    from django.db.models import Q
	    Author.objects.filter(Q(id__exact=1)|Q(age=35),name='小王')
	    相当于:select * from author where id=1 or age=35 and name='小王'
  6.原生的数据库操作方法
    1.查询
      函数:raw()
	  语法:Entry.objects.raw(sql语句)
    2.增删改
      def execute(request):
	    with connection.cursor() as cursor:
	      sql = "delete from index_author;"
	      cursor.execute(sql)
	      return render(request, 'xxx.html', locals())

