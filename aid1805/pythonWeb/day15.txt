python的WEB框架：
  1.Django:重量级的python Web框架
  2.Tornado:异步框架
  3.Flask:轻量级的框架
  4.Webpy:轻量级的框架
  5.Web2py:全栈框架，webpy的加强版

设计模式和框架模式
  1.设计模式
    设计模式是一套被反复使用，多数人知晓并经过分类的代码设计经验的总结，是为了解决一些通用性问题的
    目的：重用代码并保证代码的可靠性。
    官方认证的设计模式有23种：单例模式，抽象工厂模式，观察者模式，...
  2.框架模式
    代码的重用，框架模式是解决如何设计程序框架的代码，在框架模式中会包含多种的设计模式。
    如：MVC，MTV，MVVM，ORM，...
    1.MVC
      M:Models,模型层
        在程序中主要处理数据，负责在数据库中对数据进行存取操作(CRUD)。
      V:Views,视图层
        应用程序中处理显示的部分内容(html,jsp)。
      C:Controllers,控制器层
        处理用户交互的部分，通常负责从模型中取出数据，再进行业务的处理，最后将数据给视图，并将视图给客户端。
    2.MTV
      M:Models,模型层，功能同上。
      T:Templates,模板层
        用于处理用户显示的部分内容，如html。
      V:Views,视图层
        处理用户交互部分，从模型中获取数据，再将数据给模板，再显示给用户。

1.Django框架
	1.什么是Django
	  是一个开源框架，2005年发布，采用python语言开发的。早期Django是做新闻网站的。
	  提供了非常强大的后台管理系统，采用的是MTV的框架模式
	  Django是一种全栈框架(包含WEB整体的解决方案，包含开发框架，运行环境)。
	2.Django的优缺点
	  1.优点
	    1.开源框架，有完美的文档支持
	    2.解决方案比较完整，内部功能也比较多
	    3.提供完整的路由系统，优雅的URL解析方式
	    4.自主式的后台管理
	  2.缺点
	    目标：高内聚，低耦合
	    耦合度偏高。
	3.Django的安装
	  1.Linux中的安装
	    1.查看已安装的django
		  1.进入到虚拟环境中
		  2.进入到python的交互模式
		  3.在交互模式中输入
		    1.import django
		    2.django.VERSION
	    2.安装
		  1.在线安装 - 使用pip
		    1.终端中输入
		      pip install django(安装django的最高版本)
		      pip install django==1.11.8
		      **注意：虚拟环境中不用sudo**
		  2.离线安装
		    1.下载所需要的django包
		      https://www.djangoproject.com/
		    2.在Linux中解压django
		      ex:tar -xvf Django-1.11.8.tar.gz
		    3.进入到Django文件夹中
		      cd Django-1.11.8
		    4.安装
		      python setup.py install
	  2.Windows中安装
	      1.在线安装
		  控制台中
		    pip3 install django==1.11.8
	      2.离线安装
		    1.下载django安装包
		    2.解压django包
		    3.进入到django包中
		      python setup.py install
	4.使用Django
	  **1.创建Django项目**
	      直接使用django-admin去创建Django项目
	      1.找到项目文件夹(自定义)
		    ex:mkdir my_project
		       cd my_project
	      2.使用django-admin指令,在目标文件夹中创建一个项目.
		    django-admin startproject 项目名称
		    ex:django-admin startproject day2
	  **2.启动Django项目**
	      1.进入到项目文件夹中
	      2.通过manage.py启动项目
		1.本机访问：
		  python manage.py runserver
		  或者
		  ./manage.py runserver
		  注意:只能在本机访问。
		  http://localhost:8000
		  http://127.0.0.1:8000
		2.允许在局域网中访问：
		**./manage.py runserver 0.0.0.0:8000**
		  允许在局域网内访问,可以通过IP地址访问(查找IP指令：ifconfig)
		  DisallowedHost at/...报错处理：
		    找到settings.py文件,设置ALLOWED_HOSTS = ['*']
		    ex:my_project -> day2(项目名称) -> day2(主文件夹) -> settings.py -> ALLOWED_HOSTS = ['*']
	5.Django结构介绍
	    1.manage.py
	      负责执行django中的各项操作的文件
	      命令脚本文件
	      如：
		    1.启动服务
		    2.创建应用
		    3.创建管理员，用户
		      ...
	    2.主文件夹（名称与项目名称相同）
	      存放项目的最基础的配置文件
	      1._init_.py
		项目初始化文件，每当服务器启动的时候会自动执行;
		如果有自定义的初始化操作，需要放在该文件中.
	      2.urls.py
		项目的基础url（路由）配置文件
		路由：去哪里找执行的程序
	      3.wsgi.py
		配置应用服务器的文件，暂时不用
	      4.settings.py(重要)
		项目的主设置文件：应用，模板，数据库，语言，时区...
		1.BASE_DIR:项目所在的绝对路径
		2.DEBUG:调试模式
		  开发过程中，推荐使用 True
		  上线运行时，必须改为 False
		3.ALLOWED_HOSTS
		  设置允许访问本地项目的地址列表，如果不设置，只有本机(localhost/127.0.0.1访问)。
		  推荐使用'*'，表示任何机器都允许访问当前的项目。
		4.INSTALLED_APPS
		  指定已安装的应用，如果有自定义应用的话，需要在此注册
		5.MODDLEEWARE
		  注册中间件
		6.ROOT_URLCONF
		  指定项目的基础路由配置文件
		7.TEMPLATES
		  指定模板的信息
		8.DATABASS
		  指定数据库的信息
		9.LANGUAGE_CODE
		  指定语言，允许修改为 zh-Hans
		10.TIME_ZONE
		  指定时区，建议改为 Asia/Shanghai
	6.settings的加载流程
	    1.先加载global_settings
	      位于：虚拟环境中
	      /lib/python3.5/site-package/django/conf
	    2.再加载项目中的settings
	      注意：如果global_settings中的内容与项目settings中的内容冲突的话，优先使用
		    项目的settings中的内容
	7.初识django-admin和manage.py
	    1.终端中直接输入django-admin
	    2.进入到项目文件夹，输入./manage.py
		[auth]
		    changepassword   # 修改密码
		    createsuperuser  # 创建超级用户
		[contenttypes]
		    remove_stale_contenttypes
		[django]
		    check
		    compilemessages
		    createcachetable
		    dbshell          # 进入到Django数据shell交互模式
		    diffsettings
		    dumpdata
		    flush
		    inspectdb        # 将数据表直接导出为Models
		    loaddata 
		    makemessages  
		    makemigrations   # 创建数据库日志文件，记录Models的改动
		    migrate          # 将数据库日志文件同步到数据库中
		    sendtestemail
		    shell
		    showmigrations
		    sqlflush
		    sqlmigrate
		    sqlsequencereset
		    squashmigrations
		    startapp         # 创建应用
		    startproject     # 创建项目
		    test
		    testserver
		[sessions]
		    clearsessions
		[staticfiles]
		    collectstatic
		    findstatic
		    runserver        # 启动服务
	8.URL的使用
	    1.urls.py
	      默认在主文件夹中，包含所有的地址映射。每当一个请求产生后，都会到urls.py中进行
	      地址的匹配，匹配上后再找到对应的处理程序（views视图）去执行。
	    2.测试
	      1.项目主文件夹中，创建views.py
		  作用：包含所有定义好的视图（处理程序）
		  views.py:
		    from django.http import HttpResponse
		    def fun_views(request):
		      return HttpResponse('Hello Django!')
	      2.在urls.py中追加
		  from .views import *
		  urlpatterns = [
		     url(r'^admin/', admin.site.urls),
		     url(r'^fun/$',fun_views),
		  ]
	    3.url函数
	      url函数的语法：
	        url(regex,views,kwargs=None,name=None)
		  1.regex
		    正则表达式，匹配请求的url
		  2.views
		    URL处理的视图函数，通常都是自定义的
		  3.kwargs
		    字典，用来向views传参的
		  4.name
		    字符串，给url()起一个别名，主要在模板中配合{%url%}一起使用
	  **4.url向views传参**
	      1.使用正则表达式传参(推荐)
		    使用正则表达式的子组传参，使用()
		  urlpatterns = [
		    url(r'^fun/$',fun_views),
		    url(r'^fun/(\d+)',fun_arg1_views),
		  ]   
		  注意：
		    1.在url()中，一个子组()表示一个参数;
		    2.在views.py中，对应的处理函数要根据url()中子组的个数相应的定义参数，
		      定义的参数要在request之后.
	      2.使用url()第三个参数，字典传参
		  urlpatterns = [
		    url(r'^showname/$',show_views,{'name':'zsf','age':'25'}),
		  ]
		  views.py
		  def show_views(request,name,age):
		    resp = HttpResponse(name+':'+age)
		    return resp
		  注意：
		    1.视图处理函数中，必须声明参数;
		    2.参数的名称和位置，必须要与字典中的名称和位置保持一致.

Django中的应用
    1.什么是应用?
	  应用是网站中的一个独立模块，包含独立的显示信息。
	  在项目主文件夹中一般不处理其它的请求，主要做初始化设置以及地址的分发；实际操作中，会将请求交给不同的应用去处理。
  **2.创建应用**
	  1.命令
	    ./manage.py startapp 应用名称
	    ex:
	      ./manage.py startapp index
	      ./manage.py startapp news
	  2.在settings.py中注册应用
	    在INSTALLED_APPS中追加应用名称即可
	    INSTALLED_APPS = [
	        'django.contrib.admin',
                ......
	        'index',
	        'news',
	    ]
	3.应用的结构组成
	  1.migrations目录
	    存放数据库日志文件，是一个django与数据库交互的中间文件.
	  2._init_.py
	    应用的初始化操作文件.
      3.admin.py
        应用的后台管理配置文件.
	  4.apps.py
	    应用的属性设置文件，不需要改动.
	  5.models.py
	    Models模型文件.
	  6.tests.py
	    测试模块，通常不用.
	  7.views.py
	    定义视图的py文件.
