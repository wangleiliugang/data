第五章：动态网络的挑战

1.selenium
    一个web自动化测试工具，最初是为了网站自动化测试而开发的。
    安装：sudo pip install selenium (pip install selenium)
    测试：from selenium import webdriver
    安装驱动：百度搜索selenium firefox driver，下载对应浏览器的驱动程序。
    将下载的驱动程序，安装在与python解释器相同的路径下。（如C:\Users\13775\Anaconda3）
    python环境下运行程序，进而驱动浏览器工作。
    启动火狐浏览器：
    from selenium import webdriver
    browser = webdriver.Firefox()
    browser.get('http://www.bing.com')
    browser.find_element_by_id('sb_form_q').send_keys('区块链')
2.SSL（安全套阶层）
    HTTPS = HTTP + SSL
    加密算法:对称加密--->AES,DES加密算法等等；加密和解密使用同一个密钥。
            非对称加密--->RSA算法；加密和解密使用不同的密钥，私钥和公钥。
                         用公钥加密的数据只有私钥可以解；私钥加密的数据只有公钥能解。
                         算质素（素数）：m = p*q
    python中处理HTTPS证书安全的方法：
        import ssl  # 安全套接层
        # 自己来保证网站证书的安全
        context = ssl._create_unverified_context()
        response = urllib.request.urlopen(req,context=context) 
3.selenium通过浏览器的驱动，支持大量的HTML和Javascript的操作，常用的包含如下：
    page_source:获取当前的html文本
    title:html的title
    current_url:当前网页的url
    get_cookie()/get_cookies():获取当前的cookie
    delete_cookie/delete_all_cookies():删除所有的cookie
    add_cookie():增加一段cookie
    set_page_load_timeout():设置网页超时
    execute_script():同步执行一段javascript命令
    execute_async_script():异步执行javascript命令
    selenium几个比较重要的方法：
        get('XXX')：通过url访问某个网站
        find_element_by_id('XXX')：通过id查找元素
        find_element_by_xpath('XXX')：通过xpath查找元素
        ......
4.cookijar
    使用cookiejar的过程：
        1.通过CookieJar和HTTPCookieProcessor创建出一个能够自己处理cookie的handler;同时使用build_opener
        使其具备能够处理cookie的能力。
        2.使用post的方式登录页面，一旦登录成功这个handler就可以自己接管有用的cookie，从而省去了手动管理
        cookie的过程。
5.使用程序处理复杂验证码的方法：
    使用google的开源项目Tesseract:
        安装Tesseract
        ubuntu中安装：sudo apt-get install tesseract-ocr
                      pip install pytesseract
        训练与测试相关网站：https://www.cnblogs.com/cnlian/p/5765871.html
    和人工打码平台交互：
        data = {"action":"captch",
                "file":img_data.encode('utf-8'),
                "apikey":"XXXYYY"
        }
        data = urlencode(data)
        req = urllib.Request(url,data,method='post')
        response = urllib.urlopen(req)
        result = response.read()
