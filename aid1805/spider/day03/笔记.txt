数据的类型
  结构化数据：类似mysql数据库表中的数据。
  半结构化数据：HTML/XML和JSON等。
  非结构化数据：各种文档，图片，视频，音频等；一般是以二进制格式存储。

第四章：提取网页中的信息

1.XPath和lxml
  XPath 是一门在XML文档中查找信息的语言；
  lxml 是一个用来处理XML的第三方python库。
  安装：pip install lxml
  使用：from lxml import etree
2.选取节点
  nodename    选取已匹配节点下名为nodename的子元素节点
  /           如果以/开头，表示从根节点作为选取起点
  //          在已匹配节点后代中选取节点，不考虑目标节点的位置
  .           选取当前节点
  ..          选取当前节点的父元素节点
  @           选取属性
3.通配符
  *           匹配任何元素
  @*          匹配任何属性
  node()      匹配任何类型的节点
4.BeautifulSoup
  一种用python语言编写的HTML/XML的解析器,它可以很好的处理不规范标记并生成解剖树(parse tree)
  安装：(sudo) pip install beautifulsoup4
  使用：from bs4 import BeautifulSoup
  使用lxml时，需要记住xpath方法；可以在浏览器中找到需要的节点元素，拷贝出xpath。
  使用bs4时，需要记住findAll方法；如果元素有id最好，是唯一的可以直接用，否则可能要遍历list来取出需要的元素。
  lxml比bs4要快的原因：
    lxml使用C语言实现的，bs4是用python来实现的；
    lxml使用的是局部加载的方式，bs4使用的是全局加载的方式。
5.正则表达式
  常用的限定符:
    代码       说明
    *          重复0次或更多次
    +          重复1次或更多次
    ?          重复0次或1次
    {n}        重复n次
    {n,}       重复n次或更多次
    {n,m}      重复n次到m次
  常用的元字符:
    代码       说明
    .          匹配除换行符以外的任意字符
    \w         匹配字母，数字，下划线，汉字
    \s         匹配任意的空白符
    \d         匹配数字
    \b         匹配单词的开始或结束
    ^          匹配字符串的开始
    $          匹配字符串的结束
匹配电子邮箱的正则表达式：^\w*@\w*\.[^@]*$
匹配url的正则表达式：^http(s)?://([\w-]+\.)+[\w-]+([/\w-\.\?%&=]*)?$

学习HTML,JS,CSS,XPath等等的网站：https://www.w3school.com.cn/
学习正则表达式的网站：https://deerchao.cn/tutorials/regex/regex.htm
