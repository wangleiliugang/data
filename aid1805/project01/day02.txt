**match object属性及函数**
  import re
  re_obj = re.compile('(ab)cd(?P<dog>ef)')
  match_obj = re_obj.search('hi, dsabcdefghijk')
  1.属性：
    match_obj.re
    match_obj.pos
    match_obj.endpos
    match_obj.lastgroup
    match_obj.lastindex
  2.函数：
    match_obj.end()
    match_obj.start()
    match_obj.span()
    match_obj.group(n=0)
    功能：获取match_obj对象匹配的内容
    参数: 默认为0，表示获取整体匹配内容
            >=1，表示获取某个子组的匹配内容
    返回值：返回对应的字符串
    match_obj.groups()
    match_obj.groupdict()
  代码：regex03.py

flags: re直接调用的匹配函数大多有flags参数；功能为辅助正则匹配的标志位．
  I--->IGNORECASE：匹配时忽略大小写
  S--->DOTALL：匹配换行，对.元字符起作用
  M--->MULTILINE：开头结尾计算换行，对^ $起作用
  X--->VERBOSE：让正则表达式能以#添加注释
*可以同时添加多个flags：如re.I | re.S
代码：regex04.py

**正则表达式强化练习**
　　使用正则表达式，匹配设备log日志中不同设备的address信息．
代码：test.py


**聊天室项目设计**
客户端
    发起请求

服务器端
    核心功能：
    1.有一个简单的登录(采集用户名)
    2.每个人均可以自由发言，其他人接收消息
    3.发送：hello world--->接收：张三：hello world
    4.管理员可以发言，所有人可以接收到
    5.每个人进入或者退出房间会有提示

技术选择
    1.字典{name:(address,port),...}
      列表[(address,port),(...),(...)]
    2.tcp--->并发
      udp
    3.客户端--->服务器--->其它客户端
    4.服务器发送
      接收：有人进入房间，有人退出房间，普通消息，服务器消息
      发送：服务器消息的发送
代码：1.server.py
     2.client.py
     
代码结构--->  搭建框架---> 框架测试，功能封装--->　实现一个功能测试一个功能