函数式编程
　　函数式编程是指用一系列函数解决问题
　　如：print(sum(range(1, 101)))
　
函数是一等公民
　　函数本身可以赋值给变量，赋值后变量绑定函数
　　允许将函数本身作为参数传入另一个函数
　　允许返回一个函数

函数的可重入性：
　　可重入是指一个函数传的参数一定，则结果必须一定
　　要求：def定义的函数不要访问除局部变量以外的变量
　　示例：
　　　　# 以下是不可重入函数myadd
　　　　　　y = 200
      def myadd(x):
          return x + y
      print(myadd(10))   # 210
      y = 300
      print(myadd(10))   # 310
　　　　# 以下是可重入函数myadd
      def myadd(x, y):
          return x + y
      print(myadd(10, 20))

高阶函数　High Order Function
  什么是高阶函数？
  　　满足下列其中一个条件的函数即为高阶函数：
  　　1.函数接受一个或多个函数作为参数传入
  　　2.函数返回一个函数
  如：def f1(fx, x, y):
         return fx(x, y)

python 中内建的高阶函数：map, filter, sorted
  map 函数：
  　　map(func, *iterables)
　　　　用函数和可迭代对象中的每一个元素作为参数计算出新的可迭代对象，当最短的一个可迭代对象不再提供数据时，此可迭代对象生成结束
　　　　示例1：def pow2(x):
             return x**2
          for x in map(pow2, range(1, 10)):
             print(x)
　　　　示例2：生成　1　**　4，　2　**　3，　3　**　2，　4　**　1
          使用内建的pow(x, y, z=None)
　　　　　　　　　　for x in map(pow, range(1, 10), range(4, 0, -1)):
              print(x)
    示例3：for x in map(pow, [2,3,5,7], [4,3,2,1], range(5, 10))
              print(x)
                # 2 ** 4 % 5
                # 3 ** 3 % 6
                # 5 ** 2 % 7
                # 7 ** 1 % 8
    示例4：L = [2,3,3,5]
          '*'.join(map(str, L))      # 2*3*3*5
  filter 函数：
  　　格式：filter(func, iterable)
    作用：筛选可迭代对象iterable中的数据,返回一个可迭代对象,此可迭代对象将对iterable进行筛选
    说明：函数func将对每个元素进行求值,返回false则将此数据丢弃,返回True则保留此数据
    示例：def isodd(x):          # 此函数判断x是否为奇数
    　　　　　　　　　return x % 2 == 1
         for x in filter(isodd, range(10)):
             print(x) 
         even = [x for x in filter(lambda x: x % 2 == 0, range(10))]
  sorted 函数：
  　　作用：将原可迭代对象的数据进行排序，生成排序后的列表
  　　格式：sorted(iterable, key=None, reverse=False)
    说明：iterable 可迭代对象
    　　　　　key 函数是用来提供一个参数值，这个值将作为排序的依据
    　　　　　reverse 标志用来设置是否降序排序
    示例：L = [5, -2, -4, 0, 3, 1]
         L2 = sorted(L)                        # L2 = [-4, -2, 0, 1, 3, 5]
         L2 = sorted(L, reverse=True)          # L2 = [5, 3, 1, 0, -2, -4]
         L2 = sorted(L, key=abs)               # L2 = [0, 1, -2, 3, -4, 5]
         L2 = sorted(L, key=abs, reverse=True) # L2 = [5, -4, 3, -2, 1, 0]
    思考：
    　　　　names = ['Tom', 'Jerry', 'Spike', 'Tyke']
        sorted(names)
        # 要想按名字的长度升序排序怎么办？
        sorted(names, key=len)

递归函数　recursion
  函数直接或间接的调用自身

函数直接调用自身的递归
  示例1：
  import time
　　def story():
      time.sleep(3)
      print('从前有座山')
      print('山上有座庙')
      print('庙里有个老和尚在给小和尚讲故事：')
      story()
  story()
函数间接调用自身的递归
  示例2：
　　def fa():
      fb()
　　def fb():
      fa()
  fa()
  print("递归结束")
递归说明：
　　1.递归一定要控制递归的层数，当符合某一条件时要终止递归
　　2.几乎所有的递归都能用while 循环来代替

控制递归层次的示例：
def fx(n):
    print("递归进入第", n, "层")
    if n == 3:
        return
    fx(n + 1)
    print("递归退出第", n, "层")
fx(1)
print("程序结束")

  递归的优缺点：
　　  优点：递归可以把问题简单化，让思路更为清晰，代码更简洁
　　  缺点：递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
  递归函数的实现方法：先假设函数已经实现

闭包　closure
  将内嵌函数的语句和这些语句的执行环境打包在一起时，得到的对象称为闭包(closure)
  闭包必须满足三个条件：
  　　1.必须有一个内嵌函数
  　　2.内嵌函数必须引用外部函数中的变量
  　　3.外部函数返回值必须是内嵌函数
  示例：
  　　def make_power(y):
        def fx(arg):
            return arg ** y
        return fx
    pow2 = make_power(2)
    print('3的平方是：', pow2(3))
    pow3 = make_power(3)
    print('3的立方是：', pow3(3))
