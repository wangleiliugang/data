面向对象编程
　　object(对象)

什么是对象？
　　对象是指现实中的物体或实体

什么是面向对象？
　　把一切看成对象(实例)，让对象和对象之间建立关联关系

对象都有什么特征？
　　对象有很多属性(名词)
　　　　　例如：姓名，年龄，性别----->变量
　　对象有很多行为(动作，动词)
　　　　　例如：学习，吃饭，睡觉，打球----->函数(方法method)

什么是类：class
　　拥有相同属性和行为的对象分为一组，即为一个类
　　类是用来描述对象的工具，用类可以创建同类对象

车(类)　　------> BYD E6(京A.88888) 　　实例
　　　　　　　　\----> BMW X5(京B.00000) 　　实例

狗(类)　　------> 小京巴　(户籍号：000001) 
　　　　　　　　\----> 导盲犬　(户籍号：000002) 

int(类)　　------> 100(对象/示例)
　　　　　　　　　\----> 200(对象/示例)

类的创建语句：
　　语法：class 类名(继承列表):
           '''类的文档字符串'''
           实例方法定义(类内的函数称为方法method)
           类变量定义
           类方法定义
           静态方法定义
　　作用：创建一个类
　　　　　　　用于描述此类对象的行为和属性
　　　　　　　类用于创建此类的一个或多个对象(实例) 

示例见:76_class.py

类　和　对象
--------------------
　　  类　　  　　　对象　　　　　  实例
　　class    object    instance

构造函数
　　表达式：
　　　　类名([创建传参列表])
  作用：创建这个类的实例对象，并返回此实例对象的引用关系

实例(对象)说明
　　实例有自己的作用域和名字空间，可以为该实例添加实例变量(属性)
　　实例可以调用类方法和实例方法
　　实例可以访问类变量和实例变量

示例见：class Dog:
           pass
       dog1 = Dog()

实例方法：
　　语法：class 类名(继承列表):
           def 实例方法名(self, 参数1, 参数2, ...):
               '''实例方法的文档字符串'''
               语句块
  作用：用于描述一个对象的行为，让此类型的全部对象都拥有相同的行为
  说明：实例方法实质是函数，是定义在类内的函数
  　　　　　实例方法至少有一个形参，第一个形参代表调用这个方法的实例，一般命名为'self'
  实例方法的调用语法：实例.实例方法名(调用传参)
  　　　　　　　　　　　　　　　　　或者
  　　　　　　　　　　　　　　　　　类名.实例方法名(实例, 调用传参)
  示例见：77_instance_method.py

属性 attribute(也叫实例变量)
　　每个实例都可以有自己的变量，此变量称为实例变量(也叫属性)

属性的使用语法：实例.属性名

赋值规则：
　　首次为属性赋值则创建此属性
　　再次为属性赋值则改变属性的绑定关系

作用：用来记录对象自身的数据

示例见：78_attribute.py

实例方法和实例变量(属性)结合在一起用
  --->示例见：79_method_and_attribute.py

删除属性
　　用del语句可以删除一个对象的实例变量
　　语法：del 对象.实例变量名
　　示例：
　　　　class Cat:
        pass

c1 = Cat()
c1.color = '白色'  #　创建变量
print(c1.color)
del c1.color      # 删除属性
print(c1.color)   # 属性错误

初始化方法
　　作用：对新创建的对象添加实例变量(属性)或相应的资源
　　语法格式：class 类名(继承列表)
               def __init__(self [,形参列表]):
                   语句块

  说明：
  1.初始化方法名必须为__init__　不可改变
  2.初始化方法会在构造函数创建实例后自动调用，且将实例自身通过第一个参数self传入__init__方法
  3.构造函数的实参将通过__init__方法的形参列表传入__init__方法中
  4.初始化方法内部如果需要返回则只能返回None
  示例见：80_init_method.py

析构方法
　　语法：class 类名(继承列表):
           def __del__(self):
               语句块
　　说明：析构方法在对象销毁时被自动调用
　　作用：清理此对象所占用的资源
  示例见：81_del_method.py

python 不建议在析构方法内做任何事情，因为对象销毁的时间难以确定

预置实例属性
1.__dict__属性
　　此属性绑定一个存储此实例自身变量(属性)的字典
  python中任何对象的属性都存在该对象的字典中．
　　示例：class Dog:
           pass
       dog1 = Dog()
       print(dog1.__dict__)
       dog1.kinds = '京巴'
       print(dog1.__dict__)
       dog1.color = '白色'
       dog1.__dict__['age'] = 3
2.__class__属性
  此属性用来绑定创建此实例的类
  作用：可以借助此属性来访问创建此实例的类
  示例：class Dog:
           pass
       dog1 = Dog()
       dog2 = Dog()
       dog3 = dog1.__class__()  # 创建dog1的同类对象
       dog1.__class__ is Dog    #True
面向对象的综合示例：见82_object_relative.py

用于判断类的函数：
　　isinstance(obj, class_or_tuple) 返回这个对象obj是否是某个类class或某些类的实例，如果
                                 是则返回True,否则返回False
  type(obj) 返回对象的类型
　　示例：class Dog:
           pass
       class Car:
           pass
       animal = Dog()
       isinstance(animal, Dog)  # True
       isinstance(animal, Car)  # False
       isinstance(animal, (Car, int, list))  # False
       isinstance(animal, (Car, int, Dog))  # True
