列表　list

列表的in / not in
  　　1.判断一个数据元素是否存在于容器(列表)内，如果存在返回True,　否则返回False
    2.not in 的返回值与in 运算符 相反
　　示例：x = [1, 'two', 3.14, '四']
　　　　　　　1 in x         # True
       2 in x         # False
       3 not in x     # True
       '四' not in x  # False

列表的索引　index /切片　slice
  列表的索引语法：
  　　列表[整数表达式]
  用法：
  　　列表的索引取值与字符串的索引取值规则完全相同
  　　列表的索引为正向索引和反向索引
  示例：
  　　Ｌ = ['A', 2, 'B', 3]
    print(L[1])          # 2
    x = L[2]             # x = 'B'

列表的索引赋值
　　列表是可变的序列，可以通过索引赋值改变列表中的元素
　　语法：
　　　　　　列表[索引]　= 表达式
　　示例：
　　　　　　x = [1, 2, 3, 4]
      x[2] = 3.14        # 改变了第三个元素的值　　x = [1, 2, 3.14, 4]

*引用计数＆自动内存回收机制*

列表的切片
　　列表[:]
  列表的[::]
  列表的切片取值返回一个列表，规则等同于字符串的切片规则
  示例：
  　　　　x = list(range(9))
      y = x[1:9:2]        # y = [1, 3, 5, 7]

列表的切片赋值语法：
　　    列表[切片]　= 可迭代对象
  说明：
  　　　　切片赋值的赋值运算符的右侧必须是一个可迭代对象
  示例：
  　　　　L = [2, 3, 4]
      L[0:1] = [1.1, 2.2]
      print(L)            # [1.1, 2.2, 3, 4]
  　　　　L = [2, 3, 4]
      L[:] = [7, 8]
      print(L)            # [7, 8]
  　　　　L = [2, 3, 4]
      L[1:2] = [3.1, 3.2, 3.3]
      print(L)            # [2, 3.1, 3.2, 3.3, 4]
  　　　　L = [2, 3, 4]
      L[1:1] = [2.1, 2.2]
      print(L)            # [2, 2.1, 2.2, 3, 4]
  　　　　L = [2, 3, 4]
      L[0:0] = [0, 1]
      print(L)            # [0, 1, 2, 3, 4]
  　　　　L = [2, 3, 4]
      L[3:3] = [5, 6]
      print(L)            # [2, 3, 4, 5, 6]
  　　　　L = [2, 3, 4]
      L[1:2] = []
      print(L)            # [2, 4]
切片步长不为1的切片赋值：
　　L = list(range(1,9))
  L[1::2] = [2.2, 4.4, 6.6, 8.8]
  print(L)                # [1, 2.2, 3, 4.4, 5, 6.6, 7, 8.8]
  切片注意事项：
  　　　　对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供元素的个数一定要等于切片切出的段数
  示例：
  　　　　L = [1, 2, 3, 4, 5, 6]
      L[::2] = 'ABCD'        # 程序错误
      L[::2] = 'ABC'         # L = ['A', 2, 'B', 4, 'C', 6]

del 语句用于删除列表元素
　　语法：del 列表[索引]/del 列表[切片]
　　示例：L = [1, 2, 3, 4, 5, 6]
       del L[0]              # L = [2, 3, 4, 5, 6]
       del L[-1]             # L = [2, 3, 4, 5]
       L = [1, 2, 3, 4, 5, 6]
       del L[::2]            # L = [2, 4, 6]

python3 中常用的序列函数：
　　len(x)    返回序列的长度
　　max(x)    返回序列的最大值元素
　　min(x)    返回序列的最小值元素
　　sum(x)    返回序列中所有元素的和(元素必须是数值类型)
　　any(x)    真值测试，如果列表中其中一个值为真值则返回True, 否则返回False
　　all(x)    真值测试，如果列表中所有值为真值则返回True,只要有一个为假否则返回False

python3 中常用的列表方法(methon)
  方法　　　　　　　　　　　　　　　　　　                    意义
  L.index(value[,begin[,end]]) 返回对应元素的索引下标，begin为开始索引，end为结束索引，
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　　当value不存在时触发ValueError错误
　　L.insert(index,value) 将某个元素插放到列表中指定的位置
　　L.count(x)            返回列表中元素的个数
　　L.remove(x)           从列表中删除第一次出现在列表中的值
　　L.copy()              复制此列表(只复制一层，不会复制深层对象)
　　L.append(x)           向列表中追加单个元素
　　L.extend(list)        向列表追加另一个列表
　　L.clear()             清空列表，等同于L[:] = []
  L.sort(cmp=None,key=None,reverse=False)      将列表中的元素进行排序，默认按升序排序
  L.reverse()           列表的反转，用来改变原列表的先后顺序
  L.pop([index])        删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素

**字符串文本解析方法split 和join**
  S.split(sep=None)
  # 将字符串，使用sep作为分隔符分割S字符串，返回分割后的字符串的列表，当不给定参数时，用空白字符作为分隔符进行分割
  S.join(iterable) 
  # 用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串
  示例：
  　　　　s = 'Beijing is capital'
      L = s.split(' ')   # L = ['Beijing', 'is', 'capital']
      s = '\\'
      L = ['C:', 'Programe files', 'python3']
      s2 = s.join(L)     # s2 = 'C:\\Programe files\\python3'

深拷贝deep copy和浅拷贝shallow copy
  浅拷贝：指在复制过程中只复制一层变量，不会复制深层变量绑定的对象的复制过程
  示例:浅拷贝　L.copy()
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = L1.copy()      # 等同于L1[:]　　浅拷贝
  print(L1)           # [1, 2, [3.1, 3.2]]
  print(L2)           # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.14
  print(L1)           # [1, 2, [3.14, 3.2]]
  print(L2)           # [1, 2, [3.14, 3.2]]
  print(L)            # [3.14, 3.2]

  深拷贝：
  示例：深拷贝　copy.deepcopy(L1)
  import copy              # 导入copy 模块
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = copy.deepcopy(L1)   # 深拷贝
  print(L1)                # [1, 2, [3.1, 3.2]]
  print(L2)                # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.14
  print(L1)                # [1, 2, [3.1, 3.2]]
  print(L2)                # [1, 2, [3.14, 3.2]]
  备注：深拷贝通常只对可变对象进行复制，不可变对象通常不变

列表推导式　list comprehension
  列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式
  作用：用简易方法生成列表
  语法：
  　　　　[表达式　for 变量 in 可迭代对象 if 真值表达式]
  　　　　注：if 语句的内容可以省略
  示例：
  　　　　# 以下生成一个数值为1~9的平方的列表
  　　　　L = [x*x for x in range(1, 10)]

列表推导式的嵌套：
　　语法：
　　　　　　　　[表达式1　
        for 变量1 in 可迭代对象1 if 真值表达式1 
            for 变量2 in 可迭代对象2　if 真值表达式2
                ...]
  示例：
      L1 = [2, 3, 5]
      L2 = [7, 11, 13]
      # 将L1 中的全部元素与L2 中的全部元素依次相乘后放到列表L3 中
      L3 = [x * y for x in L1 for y in L2]


































































































