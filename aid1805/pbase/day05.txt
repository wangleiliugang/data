for 语句
　　作用：用来遍历可迭代对象(iterable)的数据元素
　　可迭代对象是指能依次获取数据元素的对象
　　可迭代对象包括：
　　　　字符串 str
    列表　　　list
    元祖　　　tuple
    字典　　　dict
    集合　　　set
    ...
  for 语句语法：
  　　for 变量列表　in 可迭代对象：
  　　　　　　语句块1
  　　else:
        语句块2
  for 语法说明：
  　　1.可迭代对象每次提供一个元素依次赋值给变量列表中的变量，赋值完毕后执行语句块1，重复执行此步骤，直到可迭代对象不能提供数据位置
  　　2.可迭代对象提供完所有元素后，执行else 子句部分的语句块2，然后退出此for语句
  　　3.else 子句部分可以省略(同while 语句类似)
  　　4.当在循环内部使用break 终止循环时，else 子句部分　语句不会执行

range() 函数
　　格式见：
　　　　　　　>>>help (range)
  函数：
  　　range(stop) 从0　开始，每次生成一个整数后加1　操作，直到stop 为止(不包含stop)
  　　range(start, stop[,step]) 从start 开始，每次生成一个整数后移动step ,直到stop 为止(不包含stop,且step可以是负整数)
  作用：用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
  说明：range 返回的对象是可迭代对象，可用于for语句中
  示例：
  　　range(4)          # 0,1,2,3
    range(3, 6)       # 3,4,5
    range(1, 10, 2)   # 1,3,5,7,9
    range(5, 0, -2)   # 5,3,1
    range(4, 0)       # 空

for 语句嵌套
　　for 语句内部可以放任意语句，包含for语句和while语句
　　示例：
　　　　　　for x in "ABC":
          for y in '123':
              print(x + y)

continue 语句
　　作用：用于循环语句(while/for语句)中，不再执行本次循环内continue 之后的语句，重新开始一次
新的循环
　　说明：1.在while语句中，执行continue 语句，将会直接跳转到while语句的真值表达式处重新判断
循环条件
　　　　　　　2.在for语句中，执行continue语句，将会从可迭代对象中取下一个元素，绑定变量后再次进行循环
　　示例：
　　　　　　for x in range(5):
          if x == 2:
              continue
          print(x)

循环总结：
　　while语句
　　for语句
　　　　可迭代对象：字符串
　　　　　　　　　　　　　　range()函数
  break语句
  continue语句

列表　list
  列表是由一系列特定元素组成的，元素和元素之间没有任何关联关系，但它们之间有先后顺序关系
  列表是一种容器
  列表是序列的一种
  列表是可以被改变的序列

python 中的序列类型简介
　　字符串　　　　  str
  列表　　　　　　 list
  元组　　　　　　 tuple
  字节串　　　　  bytes
  字节数组　　  bytearray

创建空列表的字面值
　　L = []  #　L绑定空列表
创建非空列表：
  L　= [1, 2, 3, 4]
  L = ["北京", "上海", "重庆"]
  L = [1, 'two', 3, '四']
  L = [1, 2, [3.1, 3.2, 3.3], 4]
列表的构造(创建)函数list
  list()            生成一个空的列表，等同于[]
  list(iterable)    用可迭代对象创建一个列表
  示例：
  　　　　L = list()                 L 为空列表[]
  　　　　L = list("ABCD")           L 为['A', 'B', 'C', 'D']
      L = list(range(1, 10, 2))  L 为[1, 3, 5, 7, 9]

列表的运算
　　算术运算：+ += * *=
    1.+:用于拼接列表
      x = [1, 2, 3]
      y = [4, 5, 6]
      z = x + y       # z = [1, 2, 3, 4, 5, 6]
    2.+=:用于原列表与左侧可迭代对象进行拼接，生成新的列表
      x = [1, 2, 3]
      x += 'ABC'      # x =[1, 2, 3, 'A', 'B', 'C']  # += 右侧必须是可迭代对象
    3.*:用于生成重复的列表
      x = [1, 2, 3] * 2    # x = [1, 2, 3, 1, 2, 3]
    4.*=:用于生成重复的列表，同时用变量绑定新列表
      x = [1, 2]
      x *= 3               # x = [1, 2, 1, 2, 1, 2]

列表的比较运算
　　运算符：< <= > >= == !=
  取出对应位置元素做比较，比较两者的ascii码。
  示例：
  x = [1,2,3]
  y = [2,3,4]
  x != y       # True
  x > [1,2]    # True
  x < y        # True
  [1,3,2] > [1,2,3]   # True
  ['AB', 'CD'] > ['AC', 'BD']   # False
  [1, 'two'] > ['two', 1]       # TypeError






  
























