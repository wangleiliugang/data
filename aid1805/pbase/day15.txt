迭代器 iterator 和　生成器　generator

**什么是迭代器？**
　　迭代器是指用iter(可迭代对象)函数返回的对象(实例);
　　迭代器可以用next(it)函数获取可迭代对象的数据。
迭代器函数：
　　iter(iterable) 从可迭代对象中返回一个迭代器，iterable必须是一个能提供迭代器的可迭代对象
　　next(iterator) 从迭代器iterator中获取下一条记录，如果无法获取下一条记录，则触发
                 StopIteration异常
说明：
　　迭代器是访问可迭代对象的一种方式;
　　迭代器只能向前取值，不会后退;
　　用iter函数可以返回一个可迭代对象的迭代器。

问题：能否用迭代器访问range(100, 1000)中的前三个数？(要求：不要使用for循环)
　　r = range(100, 1000)
  it = iter(r)
  print('第一个元素是：',next(it))
  print('第二个元素是：',next(it))
  print('第三个元素是：',next(it))
迭代器的用途
　　迭代器对象能用next函数获取下一个元素。

<-----map()函数在python3中返回迭代器----->

示例：见59_iterator.py 
　　用while 循环语句来访问如下列表
　　L = [2, 3, 5, 7]

**什么是生成器？**
　　生成器是能够动态提供数据的对象，生成器对象也是可迭代对象(实例)。

生成器有两种：
　　1.生成器函数
　　2.生成器表达式
生成器函数定义:
　　含有yield 语句的函数是生成器函数，此函数被调用时将返回一个生成器对象。
    注：yield 翻译为产生(生成)
yield 语句
　　语法：yield 表达式
　　说明：yield 用于def函数中，目的是将此函数作为生成器函数使用
　　　　　　　yield 用来生成数据，供迭代器next(it) 函数使用
示例：见60_yield.py 

生成器函数说明：
　　生成器函数的调用将返回一个生成器对象，生成器对象是一个可迭代对象;
　　在生成器函数调用return时会出生一个StopIteration异常来通知next(it)函数不能在提供数据。
生成器表达式：
　　语法：(表达式　for 变量　in 可迭代对象　[if 真值表达式])
　　　　　　　注：[]里的内容可以省略
　　作用：用推导式的形式生成一个新的生成器
　　示例：gen = (x**2 for x in range(1, 5))
       it = iter(gen)
       next(it)
  优点：不占用内存空间

**列表推导式和生成器表达式的区别：**
　　L = [1, 2, 3, 4]
  gen = (x for x in L)   # gen绑定生成器
  lst = [x for x in L]   # lst绑定列表
  L[1] = 222
  for x in lst:
      print(x)    # 1 2 3 4   不变
　　for x in gen:
      print(x)    # 1 222 3 4  第二个元素变成222

迭代工具函数
　　迭代工具函数的作用是生成一个个性化的可迭代对象。

函数
　　zip(iter1 [,iter2, iter3, ...]) 返回一个zip对象,此对象用于生成一个元组，此元组的个数由
                                  最小的可迭代对象决定。
　　enumerate(iterable[,start]) 生成带索引的枚举对象，返回迭代类型为索引-值对
                              (index,value)对，默认索引从0开始，也可以使用start绑定。
示例：
1.zip()函数
    numbers = [10086, 10000, 10010, 95588]
    names = ['中国移动', '中国电信', '中国联通']
    for n, a in zip(numbers, names):
        print(a, '的客服号码是：', n)
    for x in zip(numbers, names):
        print(x)
    # 以下用zip函数生成一个字典
      d = dict(zip(names, numbers))
    for x in zip(range(10), numbers, names):
        print(x)
2.enumerate()函数(枚举函数)
  格式：enumerate(iterable[,start])
  示例：
     names = ['中国移动', '中国电信', '中国联通']
     for x in enumerate(names):
         print(x)   # (0, '中国移动'), (1, '中国电信'), (2, '中国联通')
     for x in enumerate(names, start=100):
         print(x)   # (100, '中国移动'), (101, '中国电信'), (102, '中国联通')

问题：
　　之前学的容器类型：
　　　　str, list, tuple, dict, set, frozenset

**字节串bytes 和　字节数组bytearray**
1.字节串　bytes
  作用：存储以字节为单位的数据
  说明：字节串是不可变的字节序列
  　　　　　字节是0~255之间的整数
  1byte(字节) = 8bit(位)
创建空字节串的字面值
　　b''
  b""
  b''''''
  b""""""
　　B''
  B""
  B''''''
  B""""""
创建非空字节串的字面值
  b'ABCD'
  b'\x41\x42'
  b'hello tarena'
字节串的构造函数bytes
  bytes()　 生成一个空的字节串，等同于b''
  bytes(整型可迭代对象)　　用可迭代对象初始化一个字节串,整型数不能大于255
  bytes(整型n)　　生成n个值为0的字节串
  bytes(字符串, encoding='utf-8')  用字符串的转换编码生成一个字节串
      如:bytes('hello 中国', 'utf-8')
字节串的运算
　　+ += * *=
  < <= > >= == !=
  in / not in
  索引 / 切片
示例： 
　　1.b = b'abc' + b'123'    # b = b'abc123'
  2.b += b'ABC'            # b = b'abc123ABC'
  3.b = b'ABCD'
    b'A' in b 或者 65 in b  # True 

用于序列的函数
  len(x), max(x), min(x), sum(x), all(x), any(x)

bytes 与 str 的区别：
　　bytes 存储字节(0-255)
　　str 存储Unicode字符(0-65535)  

**字节串bytes 与 字符串str的转换：**
        编码(encode)
  str --------------> bytes
        b = s.encode('utf-8')
        解码(decode)
  bytes --------------> str 
        s = b.decode('utf-8')

2.字节数组bytearray
　　说明：可变的字节序列
  可变　　　　　　　　　　　　不可变
　　list---------> tuple
　　set----------> frozenset
　　bytearray----> bytes
创建字节数组的构造函数
　　bytearray() 创建空的字节数组
　　bytearray(整数)
　　bytearray(整数可迭代对象)
　　bytearray(字符串, encoding='utf-8')
    注：以上参数等同于字节串
字节数组的运算
　　+ += * *= 
  < <= > >= == != 
  in / not in
  索引 / 切片  　　　　#　字节数组支持索引和切片赋值，规则与列表相同
bytearray 的方法:
　　B.clear() 清空字节数组
　　B.append(n) 追加一个字节(n为0-255的整数)
　　B.remove(value) 删除第一个出现的字节，如果没有出现，则产生ValueError错误
　　B.reverse() 字节的顺序进行反转
　　B.decode(encoding='utf-8') 解码
　　B.find(sub [, start[, end]]) 查找
