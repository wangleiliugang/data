常用的字符串方法
  字符串方法的调用语句
  　　对象.方法名（方法传参）
　　　　注：方法的调用属于表达式，通常可以返回一个值或None
    示例：'abc'.isalpha()    # True
    　　　　 'abc12'.isalpha()  # False
    s.split(如:',')            把一个字符串以某种方式分隔开，如以','分隔,返回一个列表
    s.isdigit()                判断字符串中的字符是否全为数字
    s.isalpha()                判断字符串是否全为英文字母
    s.islower()                判断字符串所有字符是否全为小写英文字母
    s.isupper()                判断字符串所有字符是否全为大写英文字母
    s.isspace()                判断字符串是否全为空白字符
                                #空白字符包括:空格，水平制表符\t，换行符\n等不可见的字符
    s.center(width[,fill])     将原字符串居中，左右默认填充空格
    s.count(sub[,start[,end]]) 获取一个字符串中子串的个数      
    s.find(sub[,start[,end]])  获取字符串中子串sub的索引，失败返回-1
    s.strip()                  返回去掉左右空白字符的字符串
    s.lstrip()                 返回去掉左侧空白字符的字符串
    s.rstrip()                 返回去掉右侧空白字符的字符串
    s.upper()                  生成将英文转换为大写的字符串
    s.lower()                  生成将英文转换为小写的字符串
    s.replace(old,new[,count]) 将原字符串的old用new代替，生成一个新的字符串
                                # count表示替换的个数
    s.startswith(prefix[,start[,end]])  返回s是否是以prefix开头，如果以prefix开头
    　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 # 返回True,否则返回False
　　　　s.endswith(suffix[,start[,end]])    返回s是否是以suffix开头，如果以suffix开头
    　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 # 返回True,否则返回False
    以下是不常用的
    s.title()               生成每个英文单词的首字母大写字符串
    S.capitalize()          生成第一个英文单词的首字母大写字符串
    s.isnumeric()           判断字符串是否全为数字字符
help(str)   # 可以查看所有的用法

字符串格式化表达式
　　运算符　%
  作用：生成一定格式的字符串
  语法：格式字符串　% 参数值
  　　　　　格式字符串　% (参数值1, 参数值2, ...)
  格式字符串中的　% 为占位符，占位符的位置将用参数值替换

格式化字符串中的占位符和类型码
　　占位符　　　　　意义
　　　　%s      字符串，使用str 函数转换
    %r　　　　　　字符串，使用repr函数转换
    %c      整数转为单个字符
    %d 　　　　　十进制整数
    %o 　　　　　八进制整数
    %x 　　　　　十六进制整数(a-f 小写)
    %X 　　　　　十六进制整数(A-F 大写)
    %e      指数型浮点数(e 小写)　　　　如：2.9e + 10
    %E      指数型浮点数(E 大写)　　　　如：2.9E + 10
    %f,%F   浮点十进制形式
    %g,%G   十进制形式浮点数或指数浮点数自动转换
    %%      等同于一个%字符

占位符和类型码之间的格式语法
　　% [格式语法]　类型码
　　格式语法：
　　　　-    左对齐
　　　　+　　　　显示正号
　　　　0　　　　补零
　　　　宽度(整数)
　　　　宽度.精度(整数)
　　示例：
　　　　'%10d' % 123         # '       123'
    '%-10d' % 123        # '123       '
    '%10s' % 'abc'       # '       abc'
    '%-5s' % 'abc'       # 'abc  '
    '%05d' % 123         # '00123'
    '%07.3f' % 3.1415926 # '003.142'

循环语句
　　while 语句
    作用：根据一定条件，重复的执行一条语句或多条语句
    语法： while 真值表达式：
    　　　　　　　　　　语句块1
    　　　　　　else:
              语句块2
    语法说明：
    　　1.先执行真值表达式，判断True /False
      2.如果为True 则执行语句块1，然后跳转到第1步
      3.如果为False 则执行else 子句部分的语句块2．
      　　然后结束此while 语句的执行．如果没有else 子句，则直接结束此while 语句
      4.else 子句部分可以省略(同if 语句类似)
    注意事项：
    　　1.要控制真值表达式来防止死循环
    　　2.通常用真值表达式内的变量来控制循环条件
    　　3.通常要在循环语句块内改变循环变量来控制循环的次数和变量的走向

while 语句嵌套
　　while 语句本身是语句，和其它语句一样，可以放在其它复合语句的内部
　　while 语句嵌套示意：
　　　　　　　while 真值表达式1：
　　　　　　　　　　　．．．
　　　　　　　　　　　while 真值表达式2＂
　　　　　　　　　　　　　　　．．．
　　　　　　　　　　　else:
               ．．．
           ．．．
       else:
           ．．．

break 语句
　　作用：用于循环语句(while,for 语句)中，用来终止当前循环语句的执行
　　说明：1.当break 语句执行后，此循环语句break 之后的语句将不再执行
　　　　　　　2.break 语句通常和if 语句组合使用
　　　　　　　3.break 语句终止循环时，循环语句的else子句的语句将不会执行
　　　　　　　4.break 语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出嵌套的外重循环
　　　　　　　5.break 语句只能在循环语句(while/for语句)内部使用

死循环　death loop
　　死循环是指循环条件一直成立的循环;
　　死循环通常用break 语句来终止循环;
　　死循环的else 子句永远不会执行.
　　示例：
　　while True:
      n = int(input("请输入"))
      if n == 0:
          break
      print(n)





















