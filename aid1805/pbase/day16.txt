文件　file
  什么是文件？
  　　文件是数据存储的单位
　　　　文件通常用来长期存储数据
　　　　文件中的数据是以字节为单位进行顺序存储的

文件的操作流程
　　１．打开文件
　　２．读写文件
　　３．关闭文件
　　任何的操作系统，一个应用程序同时打开文件的数量有最大数限制。

文件的打开函数　open
  open(file, mode='rt')  用于打开一个文件，返回此文件对应的文件流对象，如果打开失败，则会触发OSError错误！
  需要使用异常处理机制判定文件是否打开成功。

文件关闭方法：
　　F.close()  关闭，释放系统资源

python文件读写的类型有两种：
　　１．文本文件 (text file)
　　２．二进制文件 (binary file)

文本文件的操作
　　默认文件中存储的都为字符数据，以行为单位进行分割，在python内部统一用'\n'作为换行进行分割
　　对文本文件读写需要用字符串(str)进行数据读取和写入

各种操作系统的换行符：
　　Linux 换行符：　　      　'\n'
　　Window 换行符：　    　　 '\r\n'
　　旧的Macintosh 换行符：　 '\r'
　　新的Mac Os 换行符：　    '\n'
--------------------------------------
mode 模式字符的含义
　　　字符　　　　　　　　　　　　　　　含义
　　 'r'              以只读方式打开(默认)
   'w'              以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件
                    并以只写方式打开)
   'x'              创建一个新文件，并以写模式打开这个文件，如果文件存在则会产生
                    "FileExistsErroe"错误
   'a'              以只写文件打开一个文件，如果有原文件则追加到文件末尾
   'b'              用二进制模式打开
   't'              文本文件模式打开(默认)
   '+'              为更新内容打开一个磁盘文件(可读可写)

   * 缺省模式是'rt'
    'w+b' 可以实现二进制随机读写，当打开文件时，文件内容将被清零
    'r+b' 以二进制读和更新模式打开文件，打开文件时不会清空文件内容
    'r+' 以文本模式读和更新模式打开文件，打开文件时不会清空文件内容
--------------------------------------
python 文件常用方法
　　　方法　　　　　　　　　　　　　                　说明
　　f.close()　                     关闭文件(关闭后文件不能再读写会发生ValueError错误)　
　　f.readline()　                  读取一行数据，如果到达文件尾则返回空行
　　f.readlines(max_chars=-1)　     返回列表，包含所有的行，max_chars为最大字符(或字节)数
　　f.writelines(max_chars)　       每行字符串的列表
　　f.flush()　                     把写入文件对象的缓存内容写入到磁盘---(清空缓冲区)
　　f.read(size=-1)　               从一个文件流中最多读取size个字符串
　　f.write(text)　                 写一个字符串到文件流中，返回写入的字符数
--------------------------------------
二进制文件操作方法
　　f.tell()                       返回当前文件流的绝对位置
　　f.seek(offset, whence=0)       改变数据流的位置，返回新的绝对位置
　　f.readable()                   判断这个文件是否可读，可读返回True, 否则返回False
  f.writable()                   判断这个文件是否可写，可写返回True, 否则返回False
  f.seekable()                   返回这个文件对象是否支持随机定位
  f.truncate(pos=None)           剪掉自pos位置之后的数据，返回新的文件长度(字节为单位)

文本文件的写操作
　　示例见：66_filewrite.py

文本文件的迭代读取
　　open()函数返回来的文件流对象是可迭代对象
  示例：f = open('abc.txt')
       for line in f:    # 每次取出一行，相当于line = f.readline()
           print(line)
       f.close()

标准输入输出文件
　　模块名：sys
  sys.stdin   (默认为标准键盘输入设备)
      sys.stdin.readline()
      sys.stdin.read()    #ctrl　+　d 　输入文件末尾标识符
  sys.stdout  (默认为屏幕终端)
      sys.stdout.write('hello world')
  sys.stderr  (默认为屏幕终端)
      sys.stderr.write('hello world')

二进制文件操作：
　　'b' 二进制(binary)文件操作
  对于二进制文件的读写通常需要用字节串(bytes)进行操作
　　
　　示例：见71_read_binary_file.py
　　　   f = open('infos.txt', 'rb')    # 在此处对f绑定的对象以bytes为单位进行读写
      f.close()

**f.seek()方法**
  f.seek(偏移量, whence=相对位置)
  偏移量：大于0代表向文件末尾方向移动
  　　　　　　　小于0代表向文件头方向移动
  相对位置：0　代表从文件头开始
  　　　　　　　　1 代表从当前读写位置开始偏移
          2 代表从文件尾开始偏移

问题：
　　十个汉字占多少个字节？
　　答案：GBK占20个字节　，　　UTF-8占30个字节

汉字编码
　　国标系列：
    GB18030　(二字节或四字节编码)
    　　　　GBK (二字节编码)
    　　　　　　　　GB2312 (二字节编码)
    (windows 常用)
　　国际标准：
　　　　UNICODE(2/4字节) <------> UTF-8(1~6字节)
      (Linux , Mac os , IOS , Android 常用)

python 编码(encode)字符串
　　'gb2312'
  'gbl'
  'gb18030'
  'utf-8'
  'ascii'
  ...等等

**编码注释：**
　　在源文件的第一行或第二行写入如下内容为编码注释
　　# -*- coding:gbk -*-
      设置源文件编码为：gbk
  或者
  # -*- coding:utf-8 -*-
      设置源文件编码为：utf-8
