数据库　MongoDB
    程序　=　数据结构　+　算法

数据存储的发展阶段
    1.文件管理阶段  (open  csv  wexcl)
    优点：数据可以长期保存
         能存储大量的数据
         使用比较简单
    缺点：数据的一致性差
         数据冗余度大
         查找修改不方便
    2.数据库管理阶段
    优点：数据组织结构化
         冗余度小
         容易扩充
         查找效率高
         方便使用程序自动处理
    缺点：需要使用sql语句等特定的语句处理，相对比较复杂

几个概念
1.数据：能够输入到计算机中被识别处理的信息集合
2.数据库：按照数据的组织结构，存储和管理数据的仓库；
         是在数据库管理系统管理和控制下，存放在一定介质上的数据集合
3.数据库管理系统：管理数据库的软件，用于建立使用和维护数据路
4.数据库系统：由数据库，数据库管理系统，开发工具等共同构建的集合

关系型数据库
    采用关系模型来组织数据结构的数据库
    Oracle  DB2  SQLServer  MySql  SqLite(python标准库支持)
    优点：1.容易理解，类似常见的表格模型
         2.使用方便，都是通过sql语句进行操作，sql语句也很成熟
         3.易于维护，完整性好，数据一致性高，降低了冗余
         4.技术成熟，可以使用外连接等比较复杂的操作
    缺点：1.不能很好的满足高并发的需求，每次操作需要sql语句解析
         2.针对海量数据的瞬间爆发，在读写性能上显得不足；
         (关系型数据库内部每一步操作为了保证原子性都会加锁)
         3.数据一致性较高，在处理某些数据情况时浪费资源
         4.数据库扩展比非关系型数据库要复杂困难
非关系型数据库(NoSQL ---> Not only sql)
    优点：1.高并发，大数据下读写能力强
         2.支持分布式，容易扩展
         3.弱化了数据结构，降低了数据的一致性
    缺点：1.没有join等复杂的操作
         2.通用性差(不同的nosql数据库有不同的使用方法)
         3.操作灵活即容易混乱

*面试要求：能够描述关系型和非关系型数据库的特点
*数据库设计遵循三大范式
    1.什么是范式：
        简言之就是，数据库设计对数据的存储性能，还有开发人员对数据的操作都有莫大的关系；所以建立科学的，规范的的数据库是需要满足一些规范的来优化数据数据存储方式；在关系型数据库中这些规范就可以称为范式.
    2.三大范式：
        第一范式：当关系模式R的所有属性都不能在分解为更基本的数据单位时，称R是满足第一范式的，简记为1NF；满足第一范式是关系模式规范化的最低要求，否则，将有很多基本操作在这样的关系模式中实现不了．
        第二范式：如果关系模式R满足第一范式，并且R得所有非主属性都完全依赖于R的每一个候选关键属性，称R满足第二范式，简记为2NF．
        第三范式：设R是一个满足第一范式条件的关系模式，X是R的任意属性集，如果X非传递依赖于R的任意一个候选关键字，称R满足第三范式，简记为3NF．

nosql的使用情况
    1.数据模型简单灵活，一致性差
    2.对数据库的并发处理要求高
    3.数据库设计时无法准确估量大小，后期可能需要扩展
    4.给定的数据关系比较容易建立起键值模型

nosql的分类
    1.键值型数据库
    Redis     oracle BDB     Tokyo
    2.列存储数据库
    HBase
    3.文档型数据库
    MongoDB    CouchDB
    4.图形数据库
**要求：nosql数据库分为几类？需要知道MongoDB是文档型数据库**

MongoDB
    1.是一个文档型非关系型数据库
    2.是由c++编写的数据库
    3.支持丰富的查询操作
    4.支持多种编程语言的接口(python  ruby  c++  c#  PHP)
    5.使用简单，便于部署
    6.支持数据格式丰富
    7.支持分布式扩展

MongoDB的安装
    自动安装
    sudo apt-get install mongodb
    sudo apt-getupdate install mongodb(如果安装不成功时，升级软件源)
    默认安装位置：/var/lib/mongodb
    配置文件位置：/etc/mongodb.conf
    命令集位置：/usr/bin
    手动安装
    1.下载对应系统的安装包
    www.mongodb.com ---> download ---> community server
    2.选择安装目录(/usr/local/ 或者　/opt)
    选择一个位置将安装包解压 tar格式
    3.进入解压后的文件夹，将bin目录添加到环境变量
    PATH=$PATH:/opt/mongodb-linux-x86_64-ubuntu1604-3.4.10/bin
    export PATH
    将以上两句添加到linux自动执行脚本中
    /etc/rc.local 或者 /etc/bash.bashrc 或者 其它的自启动脚本
    4.重启系统  或者 reboot  或者 source /etc/bash.bashrc
    5.设置数据库的存储位置
    sudo mkdir -p /data/db
    mongod --dbpath /data/db
    mysql端口号 ---> 3306
    mongodb端口号 ---> 27017

mongod
    设置MongoDB的端口号：mongod --port 8888
mongo
    mongo shell  表示进入到mongodb的交互模式(注意：JavaScript)

mongodb支持的数据类型
    字符串　　整型　　布尔型　　浮点型　　数组类型　　时间类型　　文档类型　　空值null
    字符串(symbol，通常表示特殊字符)　　时间戳　　objectID  二进制　　代码js　　正则表达式

mongodb存储数据的概念
    mysql             mongodb             含义
    database          database            数据库
    table             collection         　表/集合
    column            field               字段/域
    row               document            记录/文档
    index             index               索引

*whereis mongo ---> 可以查看mongodb的安装位置
进入mongo shell:mongo
退出mongo shell:quite()

**创建数据库**
    use databasename
    use stu ---> 创建一个名字为stu的数据库
*use实际的功能表示选择使用哪个数据库；
 如果选择一个不存在的数据库，当向这个数据库插入数据时，数据库会自动创建

查看当前数据库系统中的数据库
    show dbs

数据库的命名规则
    1.原则上是满足以下几条的任意UTF-8格式的字符串
    2.不能含有空字符('')
    3.不能含有空格' '  点'.'  '/'  '\'  '\0'(字符串的结尾标识)
    4.习惯上全部小写
    5.不应超过64字节
    6.不能使用adlim  local  config 这三个名字
admin：存储用户权限
local：此数据库的内容不会被复制，只能用于本机操作
config：分片处理时存储分片信息

db ---> 一个数据库全局量，代表当前正在使用的数据库
db默认表示的是test数据库

**数据库的备份和恢复**
    备份：mongodump -h dbhost -d dbname -o dbdir
        mongodump -h 127.0.0.1 -d stu -o student
        ---> 将本机stu数据库备份到当前目录下的student文件夹
    恢复：mongorestore -h hostname:port -d dbname 路径path
        mongorestore -h 127.0.0.1:27017 -d test student/stu/
mongostat:数据库的检测
    insert(每秒插入次数)  query(每秒查询次数)  update(每秒更新次数)
    delete(每秒删除次数)  command(每秒运行命令次数)  flushes(每秒向磁盘写入次数)
    vsize(使用虚拟内存情况)  res(使用物理内存情况)
mongotop:检测每个数据库的读写时长
    ns(数据表)   total(总时长)  read(读时长)  write(写时长)
**删除当前db代表的数据库**
  db.dropDatabase()

集合的命名规则
    1.不能是空字符串
    2.不能含有'\0'
    3.不能以system. 开头，这是系统集合的保留前缀
    4.集合不能和保留字(如：select)重名，不要包含$

**创建集合**
创建集合1 ---> db.createCollection(collection_name)
    db.createCollection("class1")  创建空集合class1
查看数据库中的集合 ---> show tables或者show collections
创建集合2 ---> db.collection_name.insert()
    当向一个集合中插入一条文档，如果这个集合不存在则会自动创建集合
    db.class2.insert({name:'lily',age:17,sex:'w'})自动创建集合class2
删除集合 ---> db.collection_name.drop()
    db.stu.drop()删除stu集合

文档
    文档即在mongdb中数据的组建形式
    mongodb中数据文档为bson格式(类似于python字典，使用键值的方式保存和展示数据)
    bson ---> json(使用JavaScript进行和后端交互的最重要的数据传输形式)
    {
      "_id":objectID("askjdfhask12341klesaj")
      "name":"lily",
      "age":17
    } ---> bson格式

文档中'键'的命名规则
    1.utf-8格式的字符串
    2.不能有'\0'，不能为空(习惯上不用'.'和$)
    3.以下划线＂_＂开头的很多都是保留的键，所以一般不用下划线开头
    注意：文档中的键值对是有序的
         文档中的值指的就是文档支持的数据类型
         mongodb中区分大小写

支持的数据类型
    整型　　　　　　　　　　　整数，32位整数
    布尔型　　　　　　　　　True/False
    浮点型　　　　　　　　　存储小数
    Arrays        列表数组
    Timestamp     时间戳
    Date          时间日期
    Object        内部文档
    Null          空值
    Symbol        特殊字符字符串
    Binary data   二进制数据
    code          代码
    regex         正则表达式
    ObjectID      ObjectId字串
    objectid:系统自动为每个文档生成的不重复的主键
        键名称：_id
        值:ObjectId("5cb2d4437dd22f1fb0c6746b")
            由24位十六进制数组成，前8位是文档创建事件，其后6位是机器ID，再其后4位是进程ID，最后6位是生成的随机计数器

集合设计原则
    1.同一类文档存在一个集合里;
    2.集合中尽量存储域和文档格式相近的文档;
    3.集合中可以存在文档数据的差异.

插入文档
    db.collection_name.insert()
    db.class1.insert({name:'刘能',age:22,sex:'m'})
    db.class1.insert({name:'baoqiang',age:22,sex:'m'})
    *插入文档时域名称可以不加引号
查看插入的数据
    db.class1.find()
插入多条文档
    db.collection_name.insert([{},{},{}...])
    db.class1.insert([{name:'azhe',age:24},{name:'arong',age:22,sex:'w'},{name:'ahua',age:18,sex:'w'}])
    *_id为系统定义主键值，如果使用系统值则可以保证不重复，如果自定义值即会覆盖系统值，但是自己也不能让该域重复
使用save插入数据
    db.collection_name.save()
    db.class1.save({name:'bajie',age:1700})
    db.class1.save({_id:1,name:'laosha',age:1700})　　# 修改数据
    *当不添加_id域的时候，同insert；
     当添加_id域，该域值如果不存在则正常插入，如果存在则修改原数据
    *save不能插入多条文档
修改集合名称
　　　　db.class1.renameCollection('class0')  ---> 将class1集合改名为class0
获取表对象
db.collection_name  ---> 等价与　db.getCollection('collection_name')
    db.class1.insert({name:'lucy',age:18}) <==>等价于 db.getCollection('class1').insert({name:'lucy',age:18})
    db.getCollection('class1') <==>等价于 stu.class1

