1.索引
    3.主键索引(primary key)
        1.使用规则
          1.一个表中只能有一个主键(primary)字段
          2.对应字段的值不允许重复，且不能为空
          3.主键字段的key 标志是PRI
          4.一般把表中能够唯一标识一条记录的字段设置为主键，通常把表中记录编号的字段设置为主键
        2.创建主键(primary key)
          1.在创建表时创建
          　　　　1.字段名 数据类型　primary key,
                　　-> id int primary key,
              2....primary key(字段名)
                  示例：
                  mysql> create table t1( 
                      -> id int,
                      -> name char(20),
                      -> likes set("boy","girl","study"),
                      -> primary key(id)  
                             # primary key(id,name)   也可以设置复合主键
                      -> );
          2.在已有表中创建
            alter table 表名　add primary key(字段名);
          3.删除
            alter table 表名　drop primary key;
          4.自增长属性(auto_increment)
            1.作用：通常和主键字段一起配合使用，让主键字段自加1。
            2.创建方式
              1.创建表时创建
                字段名　数据类型　primary key auto_increment,
                示例：
                mysql> create table t3(
                    -> id int primary key auto_increment,
                    -> name char(15),
                    -> age tinyint unsigned
                    -> );
                mysql> insert into t3 values(0,"小王",26);
                mysql> delete from t3 where id=1;
              2.在已有表中添加自增长属性
                alter table 表名 modify 字段名　数据类型　primary key auto_increment
        **5.删除主键及自增长属性**
            1.alter table 表名 modify 字段名　数据类型;
            2.alter table 表名 drop primary key;
    4.外键索引(foreign key)
        1.定义：让当前表的字段值在另一张表的范围内选择
        2.语法格式
          foreign key(参考字段名) references 被参考表名(被参考字段名)
          on delete 级联动作
          on update 级联动作
        3.示例：
          表1：缴费信息表(财务)
            学号　　姓名　　  班级　　   缴费金额
             1   小张   AID1805    28000
             2   小李   AID1805    20000
             3   小胡   AID1805    25000
          表2：学生信息表(班主任)
            学号　　姓名　　 缴费金额
             1   小张    28000
        mysql> create table jftab(
            -> id int primary key,  # 被参考字段一般设置为primary key
            -> name char(20),
            -> class char(7),
            -> money int 
            -> )default charset=utf8;
        mysql> insert into jftab values(1,"小张","AID1805",28000);
        mysql> create table bjtab(
            -> stu_id int,
            -> name varchar(20),
            -> money int,
            -> foreign key(stu_id) references jfbab(id)
            -> on delete cascade
            -> on update cascade
            -> )default charset=utf8;
        以下语句执行会出错！
        mysql> insert into bjtab values(4,"未缴费",23000);
        以下语句执行级联删除操作：
        mysql> delete from jfbab where name="小李";
        以下执行更改操作：只针对操作的字段
        mysql> update jfbab set id=8 where id=1;
        4.删除外键
          alter table 表名　drop foreign key 外键名;
          　　示例：
            mysql> alter table bjtab drop foreign key bjtab_ibfk_1;
            以下语句是删除外键后，表中可以随意添加记录！
            mysql> insert into bjtab values(10,"小都",22000);
                  注意：
                    1.外键名的查看方式：show create table 表名;
                    示例：
                    mysql> show create table bjtab;
        5.在已有表中添加外键
          1.语法格式
            alter table 表名
            add foreign key(参考字段名) references 被参考表名(被参考字段名)
            on delete 级联动作
            on update 级联动作
          2.注意
            在已有表中添加外键时，会受到表中原有数据的限制
        6.级联动作
          1.cascade:数据级联更新
            1.当主表删除记录时，如果从表有相关联记录则级联删除
            2.当主表更新被参考字段的值时，从表级联更新参考字段的值
          2.restrict(检查外键限制，默认)
            1.当主表删除记录时，如果从表有相关联记录则不允许主表删除
            2.当主表update更新记录时，如果从表有相关联记录则不允许主表更新
            示例：
            mysql> alter table bjtab add 
    　　　　　　　　　　　　-> foreign key(stu_id) references jfbab(id)
    　　　　　　　　　　　　-> on delete restrict  # 默认动作，可省略
    　　　　　　　　　　　　-> on update restrict  # 默认动作，可省略
    　　　　　　　　　　　　-> ;
            以下语句执行时会出错！
            mysql> delete from jfbab where name="小张";
            mysql> update jfbab set id=10 where name="小张";
          3.set null
            1.当主表删除记录时，从表中相关联记录外键字段值变为null
            2.当主表update更新记录时，从表中相关联记录外键字段值变为null
            示例：
            mysql> alter table bjtab
                -> add foreign key(stu_id) references jfbab(id)
                -> on delete set null
                -> on update set null
                -> ;
            mysql> delete from jfbab where name="小张";
          4.no action
            用法同restrict,都是立即检查外键限制
        7.外键使用规则
          1.两张表被参考字段和参考字段的数据类型要一致
          2.被参考字段必须是key 的一种，通常是primary key


2.数据导入
    1.作用：将文件系统的内容导入到数据库中
    2.语法格式
      load data infile "文件名" into table 表名
      fields terminated by "分隔符"
      lines terminated by "分隔符"
      # 文件名必须要写绝对路径
      示例：
      tarena@tedu:~$ cat /etc/passwd | head
      tarena@tedu:~$ cat /etc/passwd | grep "tarena"
      tarena:x:1000:1000:Yan Song:/home/tarena:/bin/bash
      用户名:密码:UID:GID:描述:家目录:登录权限
      tarena@tedu:~$ cat /etc/passwd | grep "mysql"
      mysql:x:122:129:MySQL Server,,,:/nonexistent:/bin/false
      示例:
      mysql> load data infile "/var/lib/mysql-files/passwd"
          -> into table userinfo
          -> fields terminated by ":"
          -> lines terminated by "\n"
          -> ;
    3.把/etc/passwd中的数据导入到mysql数据库中
      (数据格式：mysql:x:122:129:MySQL Server,,,:/nonexistent:/bin/false)
    4.操作步骤
      1.在数据库中创建对应的表
        示例：
        mysql> create table userinfo(
            -> username char(20),
            -> password char(1),
            -> uid int,
            -> gid int,
            -> comment varchar(50),
            -> homedir varchar(50),
            -> shell varchar(50)
            -> );
      2.查看数据库的搜索路径
        show variables like "secure_file_priv";
        show variables like "%secure%";----->模糊搜索
      3.将系统文件拷贝到数据库的默认搜索路径中
        sudo cp 文件名　搜索路径----->(终端上操作)
        示例：
        sudo cp /etc/passwd /var/lib/mysql-files 
        或者
        sudo -i
        cd /var/lib/mysql-files
        ls
        exit
      4.执行导入命令
        mysql> load data infile "/var/lib/mysql-files/passwd" 
                                **文件名必须要写绝对路径
            -> into table userinfo
            -> fields terminated by ":"
            -> lines terminated by "\n"
            -> ;
3.数据导出
    1.作用：将数据库中表的记录保存到系统文件里
    2.语法格式
      select 字段名列表 from 表名 into outfile "文件名"
      fields terminated by "分隔符"
      lines terminated by "分隔符"
      **文件名必须要写绝对路径
    3.示例
      1.把userinfo 表中的用户名，密码和uid号　三个字段导出到userinfo.txt中
        mysql> select username,password,uid from userinfo
            -> into outfile "/var/lib/mysql-files/userinfo.txt"
            -> fields terminated by "   "
            -> lines terminated by "\n"
            -> ;
        查看方法：
          tarena@tedu:~$ sudo -i
          root@tedu:~# cd /var/lib/mysql-files/
          root@tedu:/var/lib/mysql-files# ls
          root@tedu:/var/lib/mysql-files# cat userinfo.txt
      2.将mysql库中user表中的User,Host两个字段值导出到user2.txt
        mysql> select User,Host from mysql.user
            -> into outfile "/var/lib/mysql-files/user2.txt"
            -> fields terminated by "  "
            -> lines terminated by "\n"
            -> ;
        查看方法：
          tarena@tedu:~$ sudo -i
          root@tedu:~# cd /var/lib/mysql-files/
          root@tedu:/var/lib/mysql-files# ls
          root@tedu:/var/lib/mysql-files# cat user2.txt
    4.注意
      1.导出的内容由SQL查询语句决定
      2.执行导出命令时路径必须指定在对应的数据库目录下
4.表的复制
    1.表的复制
      1.语法格式
      create table 表名 select 查询命令;
      2.示例：
      mysql> create table userinfo2
          -> select * from userinfo;
      # 复制userinfo表的前10行，userinfo3
      mysql> create table userinfo3
          -> select * from userinfo limit 10;
      # 复制userinfo表的用户名，密码，uid三个字段的2-10条记录，userinfo4
      mysql> create table userinfo4
          -> select username,password,uid from userinfo limit 1,9;
    2.只复制表结构
    　　1.语法格式
      create table 表名 select 查询命令 where false;
      2.示例
      mysql> create table new_t2 select * from t2 where false;
      mysql> create table new_t3 select * from t2 where 0;
    3.注意:复制表的时候不会把原有表的　键Key　属性复制过来
5.嵌套查询
    1.定义
    　　把内层的查询结果作为外层查询的条件
    2.语法格式
      select 查询语句 where 条件(select 查询语句)
    3.示例
    　　# 把uid的值小于这个字段的平均值的用户和uid显示出来
      mysql> select username,uid from userinfo where uid < (select avg(uid) from userinfo);
      # 查找userinfo表中用户名在mysql库下的user表Host值为localhost
      　　并且User值是root的用户名
      mysql> select username from userinfo
          -> where username in
          -> (select User from mysql.user where Host="localhost" and User="root");
6.多表查询
    1.两种方式
      1.select 字段名列表 from 表名列表;  # 笛卡尔积
      示例:
        首先复制表
        mysql> create table tt1
            -> select username,uid,shell from userinfo
            -> limit 2;
        mysql> create table tt2
            -> select username,uid,gid from userinfo
            -> limit 3;
        做笛卡尔积
        mysql> select * from tt1,tt2;
      2.select 字段名列表 from 表名列表 where 条件;
      示例：
      mysql> select * from tt1,tt2
          -> where tt1.uid = tt2.uid;
      # 显示省和市的信息
      mysql> select sheng.s_name,city.c_name from sheng,city
          -> where 
          -> sheng.s_id = city.cfather_id;
      # 显示省，市和县的信息
      mysql> select sheng.s_name,city.c_name,xian.x_name from sheng,city,xian
          -> where
          -> sheng.s_id = city.cfather_id and city.c_id = xian.xfather_id;
7.连接查询
    1.内连接
      1.定义：从表中删除与其他被连接表中未匹配到的行，只显示匹配到的行
      2.语法格式
        select 字段名列表 from 表1
        inner join 表2　on 条件;
      3.示例：
        # 显示省和市的信息，未匹配到的不显示
        mysql> select sheng.s_name,city.c_name from sheng
            -> inner join city on sheng.s_id = city.cfather_id;
        # 显示省，市和县的信息
        mysql> select sheng.s_name as sheng,city.c_name as shi,xian.x_name as xian from sheng
            -> inner join city on sheng.s_id = city.cfather_id
            -> inner join xian on city.c_id = xian.xfather_id;
    2.外连接
      1.左连接
        1.定义：以左表为主显示查询结果
        2.语法格式
        select 字段名列表 from 表1 left join 表2　on 条件;
        3.示例：
        mysql> select sheng.s_name,city.c_name from sheng
            -> left join city on
            -> sheng.s_id = city.cfather_id;
      2.右连接
        1.定义：以右表为主显示查询结果
        2.语法格式
        select 字段名列表 from 表1 right join 表2　on 条件;
        3.示例：
        mysql> select sheng.s_name,city.c_name from sheng
            -> right join city on
            -> sheng.s_id = city.cfather_id;
      3.综合示例:
        # 显示省，市和县的信息，要求市信息全部显示
      　　mysql> select sheng.s_name,city.c_name,xian.x_name from sheng
    　　　　　　　　-> right join city on
    　　　　　　　　-> sheng.s_id = city.cfather_id
    　　　　　　　　-> left join xian on
    　　　　　　　　-> city.c_id = xian.xfather_id;