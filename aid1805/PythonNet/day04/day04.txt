协程(微线程/纤程) ---> 本质是单线程
    定义：是一种用户态的轻量级线程(应用层)
    特点：1.轻量级，创建消耗资源非常少
         2.不涉及内核
    优点：1.无需上下文的切换开销
         2.无需同步互斥操作
         3.有较高的并发性(io并发)
         4.创建消耗资源较少
    缺点：1.无法利用计算机的多核资源
         2.遇到死循环等阻塞状态会影响整个程序的运行

可以实现协程的模块：greenlet  gevent  evenless  stackless

greenlet
安装命令：sudo pip3 install greenlet
gevent
安装命令：sudo pip3 install gevent

**greenlet构建协程步骤：**
  from greenlet import greenlet
  1.构建协程函数
    def test1():
        pass
  2.将函数变为协程
    gr1 = greenlet(test1)
  3.在相应的位置执行操作
    gr1.switch()

**gevent构建协程步骤：**
import gevent
  1.构建协程函数
    def foo(a,b):
        pass
  2.将函数注册为协程事件
    f = gevent.spawn(foo,1,2)
  3.主进程阻塞等待协程的执行
    gevent.join(b)　或者
    gevent.joinall([f, b])

**gevent协程服务器**
  代码：gevent_tcp_server.py

*进程 + 协程　方案完成高并发
1.什么是协程(单线程　　优点　　缺点　　高并发量的io操作)
2.协程是如何工作的(在线程栈中进行跳转，是应用层的技术，遇到io阻塞进行协程选择)
3.写过什么协程代码(使用gevent模块写的并发服务器说清楚即可)

非阻塞io 和　超时检测
    非阻塞io：在遇到原本阻塞的io情形时，不进行阻塞等待，如果满足执行条件即执行，不满足条件就不执行
    sockfd.setblocking(False)
        功能：设置一个套接字的阻塞状态
        参数：默认为True，表示套接字为阻塞套接字
             如果设置为False，表示非阻塞，此时套接字使用阻塞函数时若无法正常执行则抛出
             blocking异常
        监听套接字设置为非阻塞则accept不再阻塞；
        连接套接字设置为非阻塞则recv不再阻塞．
    超时检测：在阻塞状态下，设置程序超时时间；当达到事件后进程不再阻塞等待
        multiprocessing/threading ---> join
        Queue ---> get  put
        select ---> select
        Event ---> wait
    sockfd.settimeout(5)
        功能：设置套接字的超时检测时间
        参数：超时时间

**网络广播(是一端发送多端接收的模式)**
  1.udp数据报套接字
  2.广播地址:192.168.1.255(最后一位为255)
  3.设置套接字为可以发送接收广播的套接字 ---> s.setsockopt(SOL_SOCKET,SO_BROADCAST,1)
  *在网络中如果存在大量的广播会产生广播风暴，会占用大量带宽
  代码：1.broadcast_recv.py
       2.broadcast_send.py

**本地套接字**
    作用：用作本地两个进程间的通信
    传输方式：按照字节流的方式进行数据传输
    创建本地套接字：socket(AF_UNIX,SOCK_STREAM)
    通信介质：通过套接字文件实现通信
代码：1.unix_recv.py
     2.unix_send.py

**http(超文本传输协议)**
    https ---> 在http协议的基础上加了一个SSL协议，使文本传输更加安全
    属于：应用层协议 ---> 决定了传输层使用TCP协议
    用途：网站中网页的传输，数据的传输；也可以用作通过编程传输数据

http协议特点:
    1.支持典型的客户端服务器模式
    2.灵活简单
    3.几乎支持所有的数据格式
    4.是无状态的
    5.http1.0是无连接的；http1.1是持续连接的

**请求**
    客户端给服务器发送需求，希望服务器反馈信息
    请求格式：
        1.请求行：发送什么类型的请求
        2.请求头：对发送请求信息的具体描述
        3.空行(必须的)
        4.请求体：具体的请求参数或请求内容

1.请求行
  GET       /index.html    HTTP/1.1  
  (请求方法　　请求格式　　　　　　  协议版本)
  GET ---> 获取URL标识的网络资源
          (url:统一资源定位符，指的是网络资源在网络中的位置，网址即为一类url)
  POST ---> 提交一定的附加数据，用以获取相应的返回
  HEAD ---> 获取url所标识的响应消息报头
  PUT ---> 获取服务器的资源(如下载服务器文件等)
  DELETE ---> 删除一个服务器资源
  TRACE ---> 用于测试和诊断
  CONNECT ---> 保留的请求方法
  OPTIONS ---> 请求获取服务器性能，查询相关资源信息
2.请求头
  Host: www.baidu.com
  User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
  Accept-Language: en-US,en;q=0.5
  Accept-Encoding: gzip, deflate, br
  Connection: keep-alive
  Cookie: BAIDUID=751F392F1100F41683F45D49245DE2B2:FG=1; BIDUPSID=751F392F1100F41683F45D49245DE2B2; PSTM=1509104901; delPer=0; BD_HOME=0; H_PS_PSSID=1442_28827_21125_18560_28769_28723_28558_28832_28584_26350_28604_28606; BD_UPN=133352
  Upgrade-Insecure-Requests: 1  

3.请求体
  a:3
  b:4  
  get请求：请求体即为get请求的参数
  post请求：请求体即为post请求提交的内容

**响应**
    服务端接收到客户的请求，回馈给客户端信息
    响应格式：
        1.响应行：反馈响应情况
        2.响应头：对响应内容的具体描述
        3.空行(必须的)
        4.响应体：根据请求返回给客户的内容

1.响应行
  HTTP/1.1   200           OK  
  (协议版本　  响应码    响应码对应信息　)
    1xx ---> 提示信息，表示请求已经接收，正在处理
    2xx ---> 访问成功
    3xx ---> 重定向，完成任务需要其它操作
    4xx ---> 客户端错误(如:404)
    5xx ---> 服务器端错误
    200:访问成功
    400:客户端请求有语法错误
    401:访问没有授权
    403:服务器已收到请求，但是拒绝执行
    404:请求的服务器资源不存在
    500:服务器发生未知错误
    503:服务器暂时不能执行，请稍后访问再试
2.响应头
  Bdpagetype: 1
  Bdqid: 0xaf9a4504000d709b
  Cache-Control: private
  Connection: Keep-Alive
  Content-Encoding: gzip
  Content-Type: text/html
  Cxy_all: baidu+c782d7dda7e36ac3afb32c81526f82fe
  Date: Wed, 10 Apr 2019 14:02:21 GMT
  Expires: Wed, 10 Apr 2019 14:02:21 GMT
  Server: BWS/1.1
  Set-Cookie: delPer=0; path=/; domain=.baidu.com
  Set-Cookie: BDSVRTM=16; path=/
  Set-Cookie: BD_HOME=0; path=/
  Set-Cookie: H_PS_PSSID=1442_28827_21125_18560_28769_28723_28558_28832_28584_26350_28604_28606; path=/; domain=.baidu.com
  Strict-Transport-Security: max-age=172800
  Vary: Accept-Encoding
  X-Ua-Compatible: IE=Edge,chrome=1
  Transfer-Encoding: chunked  

3.响应体
<div class="s_tab" id="s_tab">
  <div class="s_tab_inner">
    <b>网页</b>
    <a href="//www.baidu.com/s?rtt=1&bsst=1&cl=2&tn=news&word=" wdfield="word"  onmousedown="return c({'fm':'tab','tab':'news'})" sync="true">资讯</a>
    <a href="http://tieba.baidu.com/f?kw=&fr=wwwt" wdfield="kw"  onmousedown="return c({'fm':'tab','tab':'tieba'})">贴吧</a>
    <a href="http://zhidao.baidu.com/q?ct=17&pn=0&tn=ikaslist&rn=10&word=&fr=wwwt" wdfield="word"  onmousedown="return c({'fm':'tab','tab':'zhidao'})">知道</a>
    <a href="http://music.taihe.com/search?fr=ps&ie=utf-8&key=" wdfield="key"  onmousedown="return c({'fm':'tab','tab':'music'})">音乐</a>
    <a href="http://image.baidu.com/search/index?tn=baiduimage&ps=1&ct=201326592&lm=-1&cl=2&nc=1&ie=utf-8&word=" wdfield="word"  onmousedown="return c({'fm':'tab','tab':'pic'})">图片</a>
    <a href="http://v.baidu.com/v?ct=301989888&rn=20&pn=0&db=0&s=25&ie=utf-8&word=" wdfield="word"   onmousedown="return c({'fm':'tab','tab':'video'})">视频</a>
    <a href="http://map.baidu.com/m?word=&fr=ps01000" wdfield="word"  onmousedown="return c({'fm':'tab','tab':'map'})">地图</a>
    <a href="http://wenku.baidu.com/search?word=&lm=0&od=0&ie=utf-8" wdfield="word"  onmousedown="return c({'fm':'tab','tab':'wenku'})">文库</a>
    <a href="//www.baidu.com/more/"  onmousedown="return c({'fm':'tab','tab':'more'})">更多»</a>
  </div>
</div>   

<div class="qrcodeCon">
    <div id="qrcode">
        <div class="qrcode-item qrcode-item-1">
            <div class="qrcode-img"></div>
            <div class="qrcode-text">
                <p><b>百度</b></p>
            </div>
        </div>
    </div>
</div>  
*响应体就是给客户端返回的内容

总结
1.什么是http协议
2.http协议请求和响应的格式
3.请求方法都有哪些
4.常见的响应码代表什么
5.get请求和post请求的区别
6.http协议的特点


**python http server相关模块**
  1.python3 http.server模块
  2.python2 BaseHTTPServer模块
作用:
  HTTPSERVER服务器，用来接收客户端的HTTP请求
代码：http_server.py

