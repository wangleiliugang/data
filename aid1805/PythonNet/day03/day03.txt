**ftp文件服务器**
    1.获取文件列表
    2.能够下载文件
    3.能够上传文件

步骤：设计(使用什么技术，实现什么功能，达到什么目的)
　　　　　计划实施
     文档确认(需求分析，概要设计，详细设计，使用说明)
     编写
     测试
  
tcp连接
并发 ---> 多进程 fork

**编写ftp文件服务器**
    实现步骤:1.创建网络连接
        1+功能架构的设计和客户端退出处理
        2.实现list file
            @客户端请求
            @服务器端确认请求
            @遍历文件夹下文件，然后把文件名发送给客户端
            @客户端接收并打印
        补充:os.listdir('path'):获取指定目录下所有的文件列表
            os.listdir('.'):获取当前文件夹下的所有文件列表
            os.path.isfile('filename'):判断文件是否为普通文件;
                                       返回值False表示不是普通文件，True表示普通文件.
            os.path.isdir(directory):判断directory是否为目录
        3.实现get file
            @客户端请求
            @服务器端确认请求
            @客户端以写(w)的方式打开文件，服务器端以读(r)的方式打开文件
            @服务器read ---> send;客户端recv ---> write
        4.实现put file
            @客户端请求
            @服务器端确认请求
            @客户端以读(r)的方式打开文件，服务器端写(w)的方式打开文件
            @服务器recv ---> write;客户端read ---> send
    代码：1.ftp_server.py
         2.ftp_client.py

**io服务器模型**
    io ---> input  output

io的分类：
    阻塞io(效率较低)
    非阻塞io(效率相对较高)
        在遇到原本阻塞的条件时不再阻塞，去执行其它内容，但需要不断轮询阻塞事件，查看是否可以执行
    io多路复用
    事件驱动io
    异步io等等

IO多路复用
    同时监控多个io事件，当某个io事件就绪就执行相应的io事件，从而形成一种并发的效果


**select模块,创建io多路复用服务器**
  windows  ---> 支持select
  linux/unix  ---> 支持select / poll / epoll
  select  poll  epoll  ---> 3种方法可以实现io多路复用
  (rlist, wlist, xlist) = select(rlist, wlist, xlist, [timeout])
    功能：通过select方法监控io事件
    参数：rlist  列表；存放要监控的读io事件(将要/期望处理的io事件)
         wlist  列表；存放要监控的写io事件(需要主动处理的io事件)
         xlist  列表；存放要监控的异常条件io事件(发生异常通知我们处理的io事件)
    返回值：当select监控的io事件中有一个或者多个事件可以处理的时候，结束阻塞，进行返回
         r  列表；参数rlist中如果有可以处理的io事件，则放在这个列表中
         w  列表；参数wlist中如果有可以处理的io事件，则放在这个列表中
         x  列表；参数xlist中如果有可以处理的io事件，则放在这个列表中
         rlist -- wait until ready for reading
         wlist -- wait until ready for writing
         xlist -- wait for an ``exceptional condition''
多路复用特点
    1.可以同时监听多种io事件
    2.当任意io事件发生时会处理
    3.在处理每个事件时不能使用死循环(防止长期占用服务器)
    4.io多路复用是基于io的处理，不是多进程或者多线程

**poll多路复用**
    1.创建poll对象
      p = select.poll()
    2.加入关注的io事件
      p.register(s)
    3.监听io事件的发生
      events = p.poll()
      返回值：列表，[(1,event),(2,event),(3,event),...]
           每一个就绪的io事件都会在返回值中给出一个对应的元组；
           元组中第一个元素为就绪io的fileno，第二个元素为具体的就绪事件
           (read/write/error)
    *往往需要写一个字典，让io对象和fileno对应起来
    4.将事件移除监控范围
      p.unregister(s)

poll和epoll中的事件分类：
     POLLIN   POLLOUT   POLLERR   POLLUP   POLLPRT  POLLVAL
相当于rlist    wlist     xlist     断开连接  紧急处理  无效数据
**event & select.POLLIN** :得到True，表示是当前事件类型准备就绪

练习：
写一个聊天室(类似qq聊天室)
1.当一个用户进入聊天室，发消息，聊天室内的所有用户都能收到消息；
2.每当有用户进入或者退出群聊时，其他成员能够收到进入和退出的信息；
3.消息收发时，不让自己收到并且消息有一定格式
    例如：张三发送了消息"hello"---> 显示为"张三　say: hello"
    (进入聊天室就要确定下自己的姓名)
4.管理员喊话功能：服务器端发送消息，所有客户端成员都能收到消息

epoll
1.epoll也是一种io多路复用的方式，效率比select和poll要高一点
2.epoll不仅支持水平触发，也支持边缘触发
  (select和poll支持水平触发)

循环服务器模型
并发服务器模型
io多路复用模型
协程服务器模型